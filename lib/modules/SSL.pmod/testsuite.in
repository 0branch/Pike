START_MARKER

dnl Note: This module has some tests with an external test script in
dnl src/modules/_Stdio

test_any([[
#pike 7.4
return SSL.constants && 1;
]], 1)

cond_begin( Crypto.Hash )
test_any([[
#pike 7.4
return SSL.cipher && 1;
]], 1)

test_do( add_constant( "S", String.string2hex ) )
test_eq( S(SSL.Cipher.MACsha("foo")->hash_raw("bar")),
	 "62cdb7020ff920e5aa642c3d4066950dd1f01f4d" )
test_eq( S(SSL.Cipher.MACsha("foo")->hash_master("bar")),
	 "2e6eda2d36d2a2f4b5d7c28c920a0b679f17d76c" )
test_eq( S(SSL.Cipher.MACmd5("foo")->hash_raw("bar")),
         "37b51d194a7513e45b56f6524f2d51f2" )
test_eq( S(SSL.Cipher.MACmd5("foo")->hash_master("bar")),
         "c413fb96a80f160c25d0e61f5b5d8078" )
test_eq( S(SSL.Cipher.MAChmac_sha("foo")->hash_raw("bar")),
         "46b4ec586117154dacd49d664e5d63fdc88efb51" )
test_eq( S(SSL.Cipher.MAChmac_md5("foo")->hash_raw("bar")),
         "0c7a250281315ab863549f66cd8a3a53" )
test_eq( S(SSL.Cipher.MAChmac_sha256("foo")->hash_raw("bar")),
         "f9320baf0249169e73850cd6156ded0106e2bb6ad8cab01b7bbbebe6d1065317" )
test_eq( S(SSL.Cipher.MAChmac_sha384("foo")->hash_raw("bar")),
         "3d10d391bee2364df2c55cf605759373e1b5a4ca9355d8f3fe42970471eca2e422a79271a0e857a69923839015877fc6" )
test_eq( S(SSL.Cipher.MAChmac_sha512("foo")->hash_raw("bar")),
         "114682914c5d017dfe59fdc804118b56a3a652a0b8870759cf9e792ed7426b08197076bf7d01640b1b0684df79e4b67e37485669e8ce98dbab60445f0db94fce" )

test_do([[
#define ASSERT(X) if(!(X)) error("Assertion failed.\n")

  object rsa = Crypto.RSA();
  rsa->set_random(random_string);
  rsa->generate_key( 1024 );
  string _key = Standards.PEM.build("RSA PRIVATE KEY",
    Standards.PKCS.RSA.private_key(rsa));

  object msg = Standards.PEM.Messages(_key);
  object part = msg->parts["RSA PRIVATE KEY"];
  object rsa_again=Standards.PKCS.RSA.parse_private_key(part->body);

  ASSERT(rsa->public_key_equal(rsa_again));

  array attrs = ({
    (["organizationName":Standards.ASN1.Types.PrintableString("Test")]),
    (["commonName":Standards.ASN1.Types.PrintableString("*")]),
  });

  string _cert = Standards.PEM.build("CERTIFICATE",
    Standards.X509.make_selfsigned_certificate(rsa_again, 3600*24, attrs));

  add_constant("pem_key", _key);
  add_constant("pem_cert", _cert);
]])

test_do([[
  SSL.context ctx = SSL.context();
  ctx->random = random_string;
  add_constant("server_ctx", ctx);
]])

test_do([[

#define ASSERT(X) if(!(X)) error("Assertion failed.\n")

  object msg = Standards.PEM.Messages( pem_cert );
  object part = msg->parts["CERTIFICATE"];
  string cert = part->body;
  ASSERT(cert);

  msg = Standards.PEM.Messages( pem_key );
  part = msg->parts["RSA PRIVATE KEY"];
  string key = part->body;
  ASSERT(key);

  object rsa = Standards.PKCS.RSA.parse_private_key(key);
  ASSERT(rsa->rsa_size()>512);

  object tbs = Standards.X509.decode_certificate(cert);
  ASSERT(tbs->public_key->pkc->public_key_equal(rsa));

  server_ctx->add_cert(rsa, ({ cert }));

  // FIXME: Shouldn't this be an ephemeral key?
  //        It doesn't seem to be related to the certificate.
  server_ctx->short_rsa = Crypto.RSA();
  server_ctx->short_rsa->set_random(server_ctx->random);
  server_ctx->short_rsa->generate_key(512);

  // Make sure that all cipher suites are available server side.
  server_ctx->preferred_suites =
    server_ctx->get_suites(SSL.Constants.SIGNATURE_invalid, 0,
                           SSL.Constants.PROTOCOL_TLS_1_2);
]])

test_do([[
  object dsa = Crypto.DSA()->generate_key(1024, 160);
  mapping attrs = ([
    "organizationName" : "Test",
    "commonName" : "*",
  ]);
  string cert = Standards.X509.make_selfsigned_certificate(dsa,
    3600*24, attrs);

  server_ctx->add_cert(dsa, ({ cert }));
]])

test_do([[
#if constant(Crypto.ECC.Curve)
  object ecdsa = Crypto.ECC.SECP_521R1.ECDSA()->
    set_random(random_string)->generate_key();
  mapping attrs = ([
    "organizationName" : "Test",
    "commonName" : "*",
  ]);
  string cert = Standards.X509.make_selfsigned_certificate(ecdsa,
    3600*24, attrs);

  server_ctx->add_cert(ecdsa, ({ cert }));
#endif
]])

test_do([[
  add_constant("client_msg", random_string(65536));
]])

test_do([[
  add_constant("log_ssl_failure",
	       lambda(int cmin, int cmax, int smin, int smax,
		      string expected,
		      array(int) suites, int state, string got)
	       {
		 log_msg("SSL 3.%d..3.%d client with SSL 3.%d..3.%d server failed.\n",
			 cmin, cmax, smin, smax);
		 log_msg("Cipher_suite: %s", SSL.Constants.fmt_cipher_suites(suites));
		 if (state != 3) {
		   log_msg("Unexpected exit state: %d.\n", state);
		 } else {
		   log_msg("Unexpected result:\n"
			   "Got:      %O\n"
			   "Expected: %O\n",
			   got, expected);
		 }
	       });
]])

test_do([[
  add_constant("invalid_suites", ([
    SSL.Constants.PROTOCOL_TLS_1_1: ({
      SSL.Constants.SSL_dhe_dss_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dhe_rsa_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_dss_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_rsa_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_anon_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_anon_export_with_rc4_40_md5,
      SSL.Constants.SSL_rsa_export_with_rc4_40_md5,
      SSL.Constants.SSL_rsa_export_with_rc2_cbc_40_md5,
      SSL.Constants.SSL_rsa_export_with_des40_cbc_sha,
      SSL.Constants.TLS_ecdhe_rsa_with_null_sha,
      SSL.Constants.TLS_ecdhe_ecdsa_with_null_sha,
      SSL.Constants.TLS_ecdh_rsa_with_null_sha,
      SSL.Constants.TLS_ecdh_ecdsa_with_null_sha,
      SSL.Constants.TLS_ecdh_anon_with_null_sha,
      SSL.Constants.TLS_rsa_with_null_sha256,
      SSL.Constants.SSL_rsa_with_null_sha,
      SSL.Constants.SSL_rsa_with_null_md5,
      SSL.Constants.SSL_null_with_null_null,
    }),
    SSL.Constants.PROTOCOL_TLS_1_2: ({
      SSL.Constants.SSL_rsa_with_idea_cbc_sha,
      SSL.Constants.SSL_dhe_rsa_with_des_cbc_sha,
      SSL.Constants.SSL_dh_anon_with_des_cbc_sha,
      SSL.Constants.SSL_rsa_with_des_cbc_sha,
      SSL.Constants.SSL_dh_rsa_with_des_cbc_sha,
      SSL.Constants.SSL_dh_dss_with_des_cbc_sha,
      SSL.Constants.SSL_dhe_dss_with_des_cbc_sha,
      SSL.Constants.SSL_dhe_dss_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dhe_rsa_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_dss_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_rsa_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_anon_export_with_des40_cbc_sha,
      SSL.Constants.SSL_dh_anon_export_with_rc4_40_md5,
      SSL.Constants.SSL_rsa_export_with_rc4_40_md5,
      SSL.Constants.SSL_rsa_export_with_rc2_cbc_40_md5,
      SSL.Constants.SSL_rsa_export_with_des40_cbc_sha,
      SSL.Constants.TLS_ecdhe_rsa_with_null_sha,
      SSL.Constants.TLS_ecdhe_ecdsa_with_null_sha,
      SSL.Constants.TLS_ecdh_rsa_with_null_sha,
      SSL.Constants.TLS_ecdh_ecdsa_with_null_sha,
      SSL.Constants.TLS_ecdh_anon_with_null_sha,
      SSL.Constants.TLS_rsa_with_null_sha256,
      SSL.Constants.SSL_rsa_with_null_sha,
      SSL.Constants.SSL_rsa_with_null_md5,
      SSL.Constants.SSL_null_with_null_null,
    }),
  ]));
]])

test_do([[
  int f(int client_min, int client_max, int server_min, int server_max,
        string expected, object server_ctx, array(int) suites)
  {
    Stdio.File client_con = Stdio.File();
    Stdio.File server_con =
      client_con->pipe(Stdio.PROP_NONBLOCK | Stdio.PROP_BIDIRECTIONAL);

    SSL.sslfile server = SSL.sslfile(server_con, server_ctx, UNDEFINED,
				     0, server_min, server_max);

    // We only have self-signed certificates, so all ECDH_RSA and
    // DH_RSA suites will fail prior to TLS 1.2, since they require
    // the certificate to be signed with RSA.
    if (((client_max < SSL.Constants.PROTOCOL_TLS_1_2) ||
         (server_max < SSL.Constants.PROTOCOL_TLS_1_2)) &
        (sizeof(suites) == 1)) {
      if ((SSL.Constants.CIPHER_SUITES[suites[0] ][0] ==
           SSL.Constants.KE_ecdh_rsa) ||
          (SSL.Constants.CIPHER_SUITES[suites[0] ][0] ==
           SSL.Constants.KE_dh_rsa)) {
        expected = 0;
      }
    }

    // A client that supports just a single cipher suite.
    SSL.context client_ctx = SSL.context();
    client_ctx->random = random_string;
    client_ctx->preferred_suites = suites;
    SSL.sslfile client = SSL.sslfile(client_con, client_ctx, 1, 0,
                                     client_min, client_max);

    int state;

    int trigged = 10;

    string server_buf = "";
    void server_send_data()
    {
      trigged = 2;
      int bytes = server->write(server_buf);
      server_buf = server_buf[bytes..];
      if (!sizeof(server_buf)) {
	server->set_write_callback(UNDEFINED);
	if (state) {
	  server->close();
	  state = 2;
	}
      }
    };
    void server_got_data(mixed ignored, string data)
    {
      trigged = 2;
      if (!sizeof(server_buf)) server->set_write_callback(server_send_data);
      server_buf += data;
    };
    void server_got_close()
    {
      trigged = 2;
    };
    void server_alert()
    {
      trigged = 0;
      // server->close();
    };

    string client_recv_buf = "";
    string client_send_buf = client_msg;
    void client_got_data(mixed ignored, string data)
    {
      trigged = 2;
      client_recv_buf += data;
    };
    void client_send_data()
    {
      trigged = 2;
      int bytes = client->write(client_send_buf[..4095]);
      client_send_buf = client_send_buf[bytes..];
      if (!sizeof(client_send_buf)) {
	client->set_write_callback(UNDEFINED);
	state = 1;
      }
    };
    void client_got_close()
    {
      trigged = 2;
      if (state == 2) state = 3;
      client->close();
    };
    void client_alert()
    {
      trigged = 0;
      // client->close();
    };

    server->set_nonblocking(server_got_data, 0, server_got_close);
    server->set_alert_callback(server_alert);
    client->set_nonblocking(client_got_data, client_send_data,
			    client_got_close);
    client->set_alert_callback(client_alert);

    // We loop the backend while something happens...
    while (trigged--) {
      mixed err = catch {
        Pike.DefaultBackend(0.005);
      };
      if (err) {
        state = -1;
        master()->handle_error(err);
        break;
      }
    }

    int ok;
    if (!expected || ((state == 3) && (client_recv_buf == expected))) {
      // log_status("OK: %s\n", SSL.Constants.fmt_cipher_suites(suites));
      ok = 1;
    } else {
      log_ssl_failure(client_min,client_max,server_min,server_max,expected,suites,state,client_recv_buf);
      ok = 0;
    }
    client->close();
    server->close();
    destruct(client);
    destruct(server);
    return ok;
  };
  add_constant("test_ssl_connection", f);
]])

dnl client_min, client_max, server_min, server_max, expected
define(test_ssl, [[
  test_tests([[array(int) a() {

    int expected_protocol = min($2, $4);
    int successes;
    int tests;

    log_status("Testing SSL 3.$1..3.$2 client with SSL 3.$3..3.$4 server...");

    // Default to just testing all key exchanges with a
    // cipher suite that is valid in all versions of SSL.
    array(int) suites = ({
      SSL.Constants.SSL_dh_anon_with_3des_ede_cbc_sha,
      SSL.Constants.SSL_rsa_with_3des_ede_cbc_sha,
      SSL.Constants.SSL_dhe_rsa_with_3des_ede_cbc_sha,
      SSL.Constants.SSL_dhe_dss_with_3des_ede_cbc_sha,
      SSL.Constants.SSL_dh_rsa_with_3des_ede_cbc_sha,
      SSL.Constants.SSL_dh_dss_with_3des_ede_cbc_sha,
#if constant(Crypto.ECC.Curve)
      SSL.Constants.TLS_ecdh_anon_with_3des_ede_cbc_sha,
      SSL.Constants.TLS_ecdhe_rsa_with_3des_ede_cbc_sha,
      SSL.Constants.TLS_ecdhe_ecdsa_with_3des_ede_cbc_sha,
      SSL.Constants.TLS_ecdh_rsa_with_3des_ede_cbc_sha,
      SSL.Constants.TLS_ecdh_ecdsa_with_3des_ede_cbc_sha,
#endif
    });

    if( `==($1,$2,$3,$4) ) {
      // Test all known cipher suites.
      suites = server_ctx->get_suites(SSL.Constants.SIGNATURE_invalid, 0, $4) -
  	    (invalid_suites[expected_protocol] || ({}));
    }

    foreach(suites, int suite) {
      successes += test_ssl_connection($1,$2,$3,$4,$5, server_ctx, ({suite}) );
      tests++;
    }
    return ({ successes, tests-successes });
  }]])
]])

test_ssl(0,0,0,0,client_msg)
test_ssl(0,1,0,0,client_msg)
test_ssl(1,1,0,0,0)
test_ssl(0,2,0,0,client_msg)
test_ssl(1,2,0,0,0)
test_ssl(2,2,0,0,0)
test_ssl(0,3,0,0,client_msg)
test_ssl(1,3,0,0,0)
test_ssl(2,3,0,0,0)
test_ssl(3,3,0,0,0)

test_ssl(0,0,0,1,client_msg)
test_ssl(0,0,1,1,0)
test_ssl(0,1,0,1,client_msg)
test_ssl(0,1,1,1,client_msg)
test_ssl(1,1,0,1,client_msg)
test_ssl(1,1,1,1,client_msg)
test_ssl(0,2,0,1,client_msg)
test_ssl(0,2,1,1,client_msg)
test_ssl(1,2,0,1,client_msg)
test_ssl(1,2,1,1,client_msg)
test_ssl(2,2,0,1,0)
test_ssl(2,2,1,1,0)
test_ssl(0,3,0,1,client_msg)
test_ssl(0,3,1,1,client_msg)
test_ssl(1,3,0,1,client_msg)
test_ssl(1,3,1,1,client_msg)
test_ssl(2,3,0,1,0)
test_ssl(2,3,1,1,0)
test_ssl(3,3,0,1,0)
test_ssl(3,3,1,1,0)

test_ssl(0,0,0,2,client_msg)
test_ssl(0,0,1,2,0)
test_ssl(0,0,2,2,0)
test_ssl(0,1,0,2,client_msg)
test_ssl(0,1,1,2,client_msg)
test_ssl(0,1,2,2,0)
test_ssl(1,1,0,2,client_msg)
test_ssl(1,1,1,2,client_msg)
test_ssl(1,1,2,2,0)
test_ssl(0,2,0,2,client_msg)
test_ssl(0,2,1,2,client_msg)
test_ssl(0,2,2,2,client_msg)
test_ssl(1,2,0,2,client_msg)
test_ssl(1,2,1,2,client_msg)
test_ssl(1,2,2,2,client_msg)
test_ssl(2,2,0,2,client_msg)
test_ssl(2,2,1,2,client_msg)
test_ssl(2,2,2,2,client_msg)
test_ssl(0,3,0,2,client_msg)
test_ssl(0,3,1,2,client_msg)
test_ssl(0,3,2,2,client_msg)
test_ssl(1,3,0,2,client_msg)
test_ssl(1,3,1,2,client_msg)
test_ssl(1,3,2,2,client_msg)
test_ssl(2,3,0,2,client_msg)
test_ssl(2,3,1,2,client_msg)
test_ssl(2,3,2,2,client_msg)
test_ssl(3,3,0,2,0)
test_ssl(3,3,1,2,0)
test_ssl(3,3,2,2,0)

test_ssl(0,0,0,3,client_msg)
test_ssl(0,0,1,3,0)
test_ssl(0,0,2,3,0)
test_ssl(0,0,3,3,0)
test_ssl(0,1,0,3,client_msg)
test_ssl(0,1,1,3,client_msg)
test_ssl(0,1,2,3,0)
test_ssl(0,1,3,3,0)
test_ssl(1,1,0,3,client_msg)
test_ssl(1,1,1,3,client_msg)
test_ssl(1,1,2,3,0)
test_ssl(1,1,3,3,0)
test_ssl(0,2,0,3,client_msg)
test_ssl(0,2,1,3,client_msg)
test_ssl(0,2,2,3,client_msg)
test_ssl(0,2,3,3,0)
test_ssl(1,2,0,3,client_msg)
test_ssl(1,2,1,3,client_msg)
test_ssl(1,2,2,3,client_msg)
test_ssl(1,2,3,3,0)
test_ssl(2,2,0,3,client_msg)
test_ssl(2,2,1,3,client_msg)
test_ssl(2,2,2,3,client_msg)
test_ssl(2,2,3,3,0)
test_ssl(0,3,0,3,client_msg)
test_ssl(0,3,1,3,client_msg)
test_ssl(0,3,2,3,client_msg)
test_ssl(0,3,3,3,client_msg)
test_ssl(1,3,0,3,client_msg)
test_ssl(1,3,1,3,client_msg)
test_ssl(1,3,2,3,client_msg)
test_ssl(1,3,3,3,client_msg)
test_ssl(2,3,0,3,client_msg)
test_ssl(2,3,1,3,client_msg)
test_ssl(2,3,2,3,client_msg)
test_ssl(2,3,3,3,client_msg)
test_ssl(3,3,0,3,client_msg)
test_ssl(3,3,1,3,client_msg)
test_ssl(3,3,2,3,client_msg)
test_ssl(3,3,3,3,client_msg)

test_tests([[
object make_context(Crypto.ECC.Curve curve) {
  SSL.context ctx = SSL.context();
  ctx->random = random_string;
  Crypto.Sign ecdsa =
    curve->ECDSA()->set_random(random_string)->generate_key();
  mapping attrs = ([
    "organizationName" : "Test",
    "commonName" : "*",
  ]);
  string cert = Standards.X509.make_selfsigned_certificate(ecdsa,
    3600*24, attrs);

  ctx->add_cert(ecdsa, ({ cert }));

  ctx->ecdsa_mode();
  return ctx;
}
array(int) a() {
  int successes;
  int tests;

  foreach( ({
    Crypto.ECC.SECP_192R1,
    Crypto.ECC.SECP_224R1,
    Crypto.ECC.SECP_256R1,
    Crypto.ECC.SECP_384R1,
    // Crypto.ECC.SECP_521R1, // Tested above.
  }), Crypto.ECC.Curve curve)
  {
    log_status("Testing ECDSA curve %O...", curve->name());
    object server_ctx = make_context(curve);
    array suites = server_ctx->get_suites(SSL.Constants.SIGNATURE_ecdsa, 128,
       SSL.Constants.PROTOCOL_TLS_1_2);
    successes += test_ssl_connection(0,3,3,3,client_msg,server_ctx,suites);
    tests++;
  }

    return ({ successes, tests-successes });
}
]])

test_do([[
  add_constant("invalid_suites");
  add_constant("log_ssl_failure");
  add_constant("client_msg");
  add_constant("server_ctx");
  add_constant("pem_cert");
  add_constant("pem_key");
  add_constant("test_ssl_connection");
]])

cond_end

dnl   test_do([[
dnl     object p = Process.Process(RUNPIKE + " \"]]SRCDIR[[/https.pike\"");
dnl     sleep(5); /* Wait a little for the server to startup */
dnl     Protocols.HTTP.Query q = Protocols.HTTP.get_url("https://localhost:25678");
dnl     if (q->status != 200 || search("html", q->data()) < 0)
dnl       error("Failed\n");
dnl     /* How to kill the process if running on windows? */
dnl     p->kill(15);
dnl   ]])

test_do( add_constant("S") )

END_MARKER
