START_MARKER

dnl int random(int)
test_eq(random(-1), 0)
test_eq(random(0), 0)
test_eq(random(1), 0)
test_true([[ random(0x7fffffff)+1 ]])
test_true([[ random(0x7ffffffff)+1 ]])
test_any([[int e,d;for(e=0;e<1000;e++){d=random(10); if(d<0 || d>=10) return 0;} return 1]],1)

dnl float random(float)
test_eq(random(-1.0), 0.0)
test_eq(random(0.0), 0.0)
test_any([[int e; float d; for(e=0;e<1000;e++){d=random(10.0); if(d<0.0 || d>=10.0) return 0;} return 1]],1)

dnl mixed random(array)
test_eval_error(random(({})))
test_eq( random(({7})), 7 )
test_eq([[ random( ({11,21,31,41}) ) % 10 ]], 1)
test_eq([[ random( ({11,21,31,41}) ) % 10 ]], 1)
test_eq([[ random( ({11,21,31,41}) ) % 10 ]], 1)
test_eq([[ random( ({11,21,31,41}) ) % 10 ]], 1)

dnl mixed random(multiset)
test_eval_error(random((<>)))
test_eq( random(({8})), 8 )
test_eq([[ random( (<11,21,31,41>) ) % 10 ]], 1)
test_eq([[ random( (<11,21,31,41>) ) % 10 ]], 1)
test_eq([[ random( (<11,21,31,41>) ) % 10 ]], 1)
test_eq([[ random( (<11,21,31,41>) ) % 10 ]], 1)

dnl array random(mapping)
test_eval_error(random(([])))
test_equal( random(([5:6])), ({5,6}) )
test_eq([[ `-( @random( ([11:21,31:41]) )) ]], -10)
test_eq([[ `-( @random( ([11:21,31:41]) )) ]], -10)
test_eq([[ `-( @random( ([11:21,31:41]) )) ]], -10)
test_eq([[ `-( @random( ([11:21,31:41]) )) ]], -10)

dnl mixed random(object)
test_eq([[ random( class() { int _random() { return 17; }}()) ]], 17)

dnl string random_string(int)
test_eval_error( return random_string(-1); )
test_eq( random_string(0), "" )
test_eq( sizeof(random_string(47)), 47 )
test_any([[
  string x = "\377"*16;
  for(int i; i<100; i++) x &= random_string(16);
  return x;
]], "\0"*16)
test_any([[
  string x = "\377"*16;
  for(int i; i<100; i++) x &= ~random_string(16);
  return x;
]], "\0"*16)



test_do([[
  class R {
    inherit Random.Interface;

    int counter;
    string random_string(int len)
    {
      String.Buffer b = String.Buffer(len);
      for(int i; i<len; i++)
	b->putchar( (counter + i)&0xff );
      counter += len;
      return (string)b;
    }
  };
  add_constant("RND",R());
]])
test_eq( RND->random_string(5), "\0\1\2\3\4" )
test_eq( RND->random_string(5), "\5\6\7\10\11" )
test_eq( RND->random(10), 0 )
test_eq( RND->random(10.0), 0.0 )
test_eq( RND->random( ({1,2,3}) ), 3 )
test_eq( RND->random( (<1,2,3>) ), 1 )
test_equal( RND->random( ([1:2,3:4]) ), ({ 1,2 }))
test_eq( RND->counter, 18)
test_do( add_constant("RND") )

test_eval_error([[
  class R {
    inherit Random.Interface;
    string random_string(int len) { return 0; }
  }()->random(10);
]])
test_eval_error([[
  class R {
    inherit Random.Interface;
    string random_string(int len) { return "12345"; }
  }()->random(10);
]])
dnl test_do([[
dnl   class R {
dnl     inherit Random.Interface;
dnl     string random_string(int len) { return 0; }
dnl     variant int random(int limit) { return ::random(limit); }
dnl   }()->random( ({1,2,3}) );
dnl ]])

test_any([[
  function r1 = Random.System()->random_string;
  function r2 = Random.System()->random_string;
  return sizeof(r1(1)+r2(1)+r1(1)+r2(1));
]], 4)

test_do( add_constant("RND",Random.Deterministic(0)) )
test_eq( String.string2hex(RND->random_string(10)), "983e6a98702d56a70531")
test_eq( RND->random(10), 5 )
test_do( add_constant("RND") )

END_MARKER
