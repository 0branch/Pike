START_MARKER

test_eq([[ String.Buffer()->add("xxx") ]], 3)
test_any([[
  String.Buffer s=String.Buffer();
  s->append("xxx");
  s->append("a", "b");
  s->putchar(65);
  s->append("B");
  s->putchar(67);
  return (string)s;
]], "xxxabABC")
test_any([[
  String.Buffer s=String.Buffer(2);
  s->append("a");
  s->append("b");
  s->append("c");
  return (string)s;
]], "abc")
test_any([[
  String.Buffer s=String.Buffer(2);
  s->append("abcdefg");
  s->append("");
  s->append("hij");
  return s->get();
]], "abcdefghij")
test_any([[
  String.Buffer s=String.Buffer();
  return s->get() + s->get();
]], "")
test_any([[
  String.Buffer s=String.Buffer();
  s->append("xxx");
  string t=s->get();
  s->append("yyy");
  string u=(string)s;
  s->append("zzz");
  return t+u+(string)s;
]], "xxxyyyyyyzzz")
test_any([[
  String.Buffer s=String.Buffer();
  s->append("xxx");
  string t=s->get_copy();
  s->append("yyy");
  return t+(string)s;
]], "xxxxxxyyy")
test_any([[
  String.Buffer s=String.Buffer();
  s->append("abcde");
  return sizeof(s);
]], 5)
test_any([[
  String.Buffer b = String.Buffer(), c = b;
  string teststr = map (indices (allocate (3000)),
			lambda (int i) {
			  return "\1234" + i;
			}) * ",";
  b = b + teststr;
  b = b + "end";
  return teststr + "end" == b->get();
]], 1)
test_any([[
  String.Buffer b = String.Buffer();
  b->append("abc");
  b->append("\400\500");
  b->putchar(256);
  b->append("x");
  return (string)b;
]], "abc\400\500\400x")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("x");
  b->sprintf("%x",1178);
  b->append("y");
  return (string)b;
]], "x49ay")
test_any([[
  String.Buffer b = String.Buffer();
  b->sprintf("%x", 10);
  b->sprintf("%x", 11);
  return (string)b;
]], "ab")
test_any([[
  String.Buffer b = String.Buffer();
  b->sprintf("");
  return (string)b;
]], "")

test_compile_error([[ String.Buffer()->sprintf("%d"); ]])
test_eval_error([[ function f=String.Buffer()->sprintf; f("%d"); ]])
test_eval_error([[ String.Buffer()->append("x",([])); ]])

test_do([[
  String.Buffer b = String.Buffer();
  b->add (Standards.UUID.make_version4()->str() + "blaj");
  b->add ("x");
  return (string) b;
]])
test_do([[
  String.Buffer b = String.Buffer();
  b->add (Standards.UUID.make_version4()->str() + "blaj\12345678");
  b->add ("x");
  return (string) b;
]])
test_do([[
  String.Buffer b = String.Buffer();
  b->add (Standards.UUID.make_version4()->str() + "blaj");
  b->add ("x\12345678");
  return (string) b;
]])

test_any([[
  String.Buffer b = String.Buffer();
  b->append("abc");
  return b[1];
]], 98)
test_any([[
  String.Buffer b = String.Buffer();
  b->append("abc");
  return b[-1];
]], 99)
test_runtime_error([[
  String.Buffer b = String.Buffer();
  b->append("abc");
  return b[3];
]])
test_any([[
  String.Buffer b = String.Buffer();
  b->append("a\u0100a");
  return b[1];
]], 256)
test_any([[
  String.Buffer b = String.Buffer();
  b->append("a\U00010000a");
  return b[1];
]], 65536)

test_any([[
  String.Buffer b = String.Buffer();
  b->append("aaa");
  return b[1]='b';
]], 98)
test_any([[
  String.Buffer b = String.Buffer();
  b->append("aaa");
  b[1]='b';
  return (string)b;
]], "aba")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("aaa");
  b[1]=256;
  return (string)b;
]], "a\u0100a")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("aaa");
  b[1]=65536;
  return (string)b;
]], "a\U00010000a")

test_any([[
  String.Buffer b = String.Buffer();
  b->append("1234");
  b = b[..1];
  b->append("x");
  return (string)b;
]], "12x")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("1234");
  return (string)b[1..];
]], "234")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("1234");
  return (string)b[1..2];
]], "23")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("1234");
  return (string)b[..<1];
]], "123")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("ab\u0100\u0101\U00010000\U00010001");
  return (string)b[0..1];
]], "ab")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("ab\u0100\u0101\U00010000\U00010001");
  return (string)b[2..3];
]], "\u0100\u0101")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("ab\u0100\u0101\U00010000\U00010001");
  return (string)b[4..5];
]], "\U00010000\U00010001")

test_any([[
  String.Buffer b = String.Buffer();
  b->append("ab\u0100\u0101\U00010000\U00010001cd");
  b->cut(4,5,1);
  return (string)b;
]], "ab\u0100\u0101cd")
test_any([[
  String.Buffer b = String.Buffer();
  b->append("ab\u0100\u0101\U00010000\U00010001cd");
  b->cut(2,5,1);
  return (string)b;
]], "abcd")
test_any([[
  String.Buffer b = String.Buffer(),c;
  b->append("ab\u0100\u0101\U00010000\U00010001cd");
  c=b->cut(4,5);
  return (string)(c + "_" + b);
]], "\U00010000\U00010001_ab\u0100\u0101cd")
test_any([[
  String.Buffer b = String.Buffer(),c;
  b->append("ab\u0100\u0101\U00010000\U00010001cd");
  c=b->cut(2,5);
  return (string)c + "_" + (string)b;
]], "\u0100\u0101\U00010000\U00010001_abcd")

test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcd");a->append("abcd");
  return b=="abcd" && b==a;
]], 1)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcd");a->append("abcd");
  return b>="abcd" && b>=a;
]], 1)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcd");a->append("abcd");
  return b<="abcd" && b<=a;
]], 1)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abce");a->append("abcd");
  return b>="abcd" && b>=a;
]], 1)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abce");a->append("abcd");
  return b<="abcd" || b<=a;
]], 0)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abce");a->append("abcd");
  return b>"abcd" && b>a;
]], 1)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abce");a->append("abcd");
  return b<"abcd" || b<a;
]], 0)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcb");a->append("abcd");
  return b=="abcd" || b==a;
]], 0)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcb");a->append("abcd");
  return b>="abcd" || b>=a;
]], 0)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcb");a->append("abcd");
  return b<="abcd" && b<=a;
]], 1)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcb");a->append("abcd");
  return b>"abcd" || b>a;
]], 0)
test_any([[
  String.Buffer b = String.Buffer(), a = String.Buffer();
  b->append("abcb");a->append("abcd");
  return b<"abcd" || b<a;
]], 1)

test_any([[
  String.Buffer a=String.Buffer(),b=String.Buffer();
  a->append("Testing");
  a->appendat(0, "Is that sentence");
  a->putchar(',');
  a->append(" the concluding three ", "words");
  a->append(" `were left out'");
  a->appendat(3,"th","is");
  a[1]=a[10];
  b->append("Test me harder");
  b->append(a);
  if(b->cut(5,6) != "me")
    return 0;
  b->cut(0,11,1);
  if(a[3..6] != "this" || a->get_copy() !=b)
    return "X"+(string)b;
  if(a->get()!="In this sentence, the concluding three words `were left out'")
    return "X"+a->get();
  return 1;
]],1)

test_equal([[String.Buffer("hej")->read(1)]], "h")

dnl sscanf

test_equal([[String.Buffer("hej")->sscanf("%3c")]], ({6841706}))
test_equal([[String.Buffer("hej")->match("%3c")]], 6841706)

test_any([[
  int i;
  String.Buffer b=String.Buffer("hej hej hej");

  while( array a = b->sscanf( "%*[ ]%[^ ]") )
     i+= sizeof(a);
  return i;
]], 3)

dnl sizeof()
test_equal( sizeof(String.Buffer("hej")), sizeof("hej"))
test_equal( sizeof(String.Buffer("ej")->append("alpha")), 7)
test_equal( sizeof(String.Buffer()->sprintf("%4H","hej")), 7)

dnl create(int)
test_any([[
    String.Buffer b = String.Buffer(1024*1024);
    if( b->_size_object() != 1024*1024 )
      return -1;
   for( int i = 0; i<1024/4*1024; i++ )
     b->append("test");
   if( b->_size_object() != 1024*1024 )
      return -2;

   return 1;
]], 1 )

dnl create/add( system.memory )
test_any([[
  System.Memory a = System.Memory(__FILE__);
  System.Memory b = System.Memory(100);

  String.Buffer buf = String.Buffer(a);

  if( buf->_size_object() != 0 )
    return -1;

  buf->append( b );

  if( buf->_size_object() < sizeof(a)+sizeof(b) )
    return -2;
 if( !has_suffix((string)buf,"\0"*100) )
    return -3;
 return 1;
]], 1)

dnl create/add( iobuffer )
test_any([[
  String.Buffer a = String.Buffer("buffer 1");
  String.Buffer b = String.Buffer("buffer 2");

  String.Buffer buf = String.Buffer(a);

  buf->append( b );

  if( buf->_size_object() < sizeof(a)+sizeof(b) )
    return -2;
 if( (string)buf != "buffer 1buffer 2")
    return -3;
 return 1;
]], 1)

dnl add( char )
test_any([[
  string a = ("buffer 1");

  String.Buffer buf = String.Buffer(a);

  if( buf->_size_object() >= sizeof(a) )
    return -1;

  buf->append( 'b','u','f','f','e','r',' ','2' );

  if( buf->_size_object() < sizeof(a)+8 )
    return -2;
 if( (string)buf != "buffer 1buffer 2")
    return -3;
 return 1;
]], 1)

dnl add(array( mix ))
test_any([[
  System.Memory tst  = System.Memory(2);
  tst[0] = ' ';
  tst[1] = '2';
  String.Buffer er = String.Buffer();
  mixed z = ({
             'b','u','f',String.Buffer("f"),
             er,
             tst
   });
  er->append("er");

  String.Buffer buf = String.Buffer("buffer 1");

  buf->append( z, 'b','u','f','f',({'e','r',({' '}),'3'}) );

  if( buf->_size_object() < 24 )
    return -2;
  if( (string)buf != "buffer 1buffer 2buffer 3")
     return -3;

 return 1;
]], 1)

dnl multi add( combo, also sort of a speed test )
dnl will use on average 3Mb RAM
test_any([[
   String.Buffer two = String.Buffer();
   array tst = ({
    System.Memory(1),
    two,
    '3',
    "4",
    String.Buffer("5"),
    ({ "6", ({'7',"","",""}) }),
  });

  two->append("2");

  int l = 0;
  String.Buffer res = String.Buffer();
  for( int i = 0; i<102*1024; i++ )
  {
     array args = allocate( random(50) );
     for( int j=0; j<sizeof( args ); j++ )
     {
       mixed e = random( tst );
       if( intp( e ) )
         l +=1;
       else
         l += sizeof( e );
       args[j] = e;
     }
     res->append(@args);
     if( sizeof( res ) != l )
       return ([i:args, "l":l,"sizeof":sizeof(res)]);
  }

 return 1;
]], 1)

dnl basic zero-copy check

test_any( [[
  String.Buffer i = String.Buffer("zero copy");

  i->append(" data goes here");
  if( i->_size_object() == 0 )  return -4;

  i->read();
  if( i->_size_object() != 0 )  return -5;

  i->append("zero copy");
  if( i->_size_object() == 0 )  return -6;

  i->append(" indeed"); /* note: shorter than first string. */
  if( i->_size_object() == 0 )  return -7;

  /*
  crete - no move
  add - realloc + move
  read - no move (buffer now empty)
  add - point to str
  add -  move to malloc arena
  add - no move
  */
  return 1;
]], 1)

dnl add_byte() add_int8()

test_any( [[
 String.Buffer b = String.Buffer();

 for( int i=0; i<255; i++ )
   b->add_byte( i )->add_int8(~i);

  for( int i=0; i<255; i++ )
     if( b[i*2] != i || b[i*2+1] != (~i&255))
       return -i;
  return 1;
]], 1 )

dnl add_short() add_int16()

 test_any( [[
 string ref = "";
 String.Buffer b = String.Buffer();

 for( int i=0; i<255; i++ )
 {
   ref += sprintf("%2c%2c", i, (~i)&0xffff );
   b->add_short( i )->add_int16(~i);
   if( (string)b != ref ) return ([
     "i":i,
     "ref":ref,
     "b":(string)b
  ]);
  }
  return 1;
 ]], 1 )

dnl add_int32()
 test_any( [[
 string ref = "";
 String.Buffer b = String.Buffer();

 for( int i=0; i<255; i++ )
 {
   ref += sprintf("%4c%4c", i, (~i)&0xffffffff );
   b->add_int32( i )->add_int32(~i);
   if( (string)b != ref ) return ([
     "i":i,
     "ref":ref,
     "b":(string)b
    ]);
  }
  return 1;
 ]], 1 )


dnl add_int( x, bits);

 test_any( [[
 string ref = "";
 String.Buffer b = String.Buffer();

 for( int j=1; j<255; j++ )
 {
   string fmt = "%"+j+"c";
   for( int i=0; i<255; i+=random(10) )
   {
     ref += sprintf(fmt, i );
     b->add_int( i, j );
    }
    if( (string)b != ref ) return ([
      "width":j,
      "ref":ref,
      "b":(string)b
     ]);
    b->clear();
    ref = "";
  }
  return 1;
 ]], 1 )


dnl add_int( bignum, bits);

test_any( [[
 string ref = "";
 String.Buffer b = String.Buffer();

 for( int j=1; j<255; j++ )
 {
   int i = random((1<<(j*8))-1);
   ref += sprintf("%"+j+"c", i );
   b->add_int( i, j );
   if( (string)b != ref ) return ([
     "i":i,  "j":j,
     "ref":ref,
     "b":(string)b
    ]);
  }
  return 1;
 ]], 1 )


dnl add_hstring( str, bytes )

test_error( [[
 String.Buffer b = String.Buffer();
  b->add_hstring("testing", 0 );
 ]], 1 )

test_error( [[
 String.Buffer b = String.Buffer();
 b->add_hstring(" "*256, 1 );
]], 1 )

test_any( [[
 array(String.Buffer) b = allocate(10,String.Buffer)();
 for( int i = 0; i<1000; i++ )
 {
   string chunk = " "*random(255);

   for( int w = 0; w<9; w++ )
     b[w]->add_hstring( chunk, w+1 );
  }

 for( int i = 0; i<1000; i++ )
 {
   string chunk = b[0]->read_hstring(1);
   for( int w = 1; w<9; w++ )
   {
     if( b[w]->read_hstring( w+1 ) != chunk )
        return ({w+1,strlen(chunk)});
   }
 }
 return 1;
]], 1);

test_any( [[
   String.Buffer b = String.Buffer();
   b->append( "\0\1" );
   if( b->read_hstring( 2 ) )
     return -1;
   if( sizeof(b) != 2 )
     return -2;
   b->append("x");
   if( b->read_hstring( 2 ) != "x" )
     return -3;
   return 1;
]], 1);

dnl add_hstring( obj*, bits )

test_any( [[
 array(String.Buffer) b = allocate(10,String.Buffer)();
 System.Memory chunk = System.Memory(255);
 for( int i = 0; i<1000; i++ )
 {
   for( int w = 0; w<9; w++ )
     b[w]->add_hstring( chunk, w+1 );
  }

 for( int i = 0; i<1000; i++ )
 {
   string chunk = b[0]->read_hstring(1);
   for( int w = 1; w<9; w++ )
   {
     if( b[w]->read_hstring( w+1 ) != chunk )
        return ({w+1,strlen(chunk)});
   }
 }
 return 1;
]], 1);

dnl add_ints

test_any( [[
 array q = allocate(100000,random)(8438439834983948938439849834983498349834983498);
 String.Buffer i = String.Buffer();
 i->add_ints( q, 20 );
 return 1;
]], 1);

test_error( [[
 array q = ({8438439834983948938439849834983498349834983498});
 String.Buffer i = String.Buffer();
 i->add_ints( q, 7 );
 return 1;
]], 1);


test_any( [[
 array q = ({10,20,30});
 String.Buffer i = String.Buffer();
 i->add_ints( q, 7 );
 return 1;
]], 1);
test_error( [[
 array q = ({10,"20",30});
 String.Buffer i = String.Buffer();
 i->add_ints( q, 7 );
 return 1;
]], 1);

test_any( [[
 array q = ({10,"20",30});
 String.Buffer i = String.Buffer();
 catch{i->add_ints( q, 7 );};
 if( sizeof(i) )
   return -1;
 return 1;
]], 1);

dnl lock

dnl cast

dnl indexing

dnl set_error_mode

dnl _sprintf

test_eq([[ String.count( "", "a" ) ]], 0)
test_eq([[ String.count( "aaa", "a" ) ]], 3)
test_eq([[ String.count( "aaa", "aa" ) ]], 1)
test_eq([[ String.count( "aaaa", "aa" ) ]], 2)

test_eq([[ String.width( "" ) ]], 8)
test_eq([[ String.width( "hej\xffhej" ) ]], 8)
test_eq([[ String.width( "hej\x100hej" ) ]], 16)
test_eq([[ String.width( "hej\xffffhej" ) ]], 16)
test_eq([[ String.width( "hej\x10000hej" ) ]], 32)
test_eq([[ String.width( (string)({ 65, -1, 65 }) ) ]], 32)

test_eq(String.trim_whites (" \t\0 \t"), "\0")
test_eq(String.trim_whites (" \t\400 \t"), "\400")
test_eq(String.trim_whites (" \t\200000 \t"), "\200000")
test_eq(String.trim_whites ("\0"), "\0")
test_eq(String.trim_whites ("\400"), "\400")
test_eq(String.trim_whites ("\200000"), "\200000")
test_eq(String.trim_whites (" \t "), "")
test_eq(String.trim_whites (""), "")
test_eq(String.trim_whites (" \t\rx\r\t "), "\rx\r")
test_eq(String.trim_whites (" \t\nx\n\t "), "\nx\n")

test_eq(String.trim_all_whites (" \t\n\r\0 \t\n\r"), "\0")
test_eq(String.trim_all_whites (" \t\n\r\400 \t\n\r"), "\400")
test_eq(String.trim_all_whites (" \t\n\r\200000 \t\n\r"), "\200000")
test_eq(String.trim_all_whites ("\0"), "\0")
test_eq(String.trim_all_whites ("\400"), "\400")
test_eq(String.trim_all_whites ("\200000"), "\200000")
test_eq(String.trim_all_whites (" \t\n\r "), "")
test_eq(String.trim_all_whites (""), "")
test_eq(String.trim_all_whites ("\t\r\n\240\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000abc\t\r\n\240\u1680\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000"), "abc")

test_eq(String.normalize_space ("\v\f \t\n\r\0\v\f \t\n\r"), "\0")
test_eq(String.normalize_space ("\v\f \t\n\r\400\v\f \t\u2000\n\r"), "\400")
test_eq(String.normalize_space ("\v\f \t\n\r\200000\v\f \t\n\r"), "\200000")
test_eq(String.normalize_space ("\v\f \t\n\ra\400\v\f \t\n\ra\400\t \v\f"),
			        "a\400 a\400")
test_eq(String.normalize_space ("\0"), "\0")
test_eq(String.normalize_space ("\400"), "\400")
test_eq(String.normalize_space ("\200000"), "\200000")
test_eq(String.normalize_space (" \t\n\r\v\f "), "")
test_eq(String.normalize_space (" \t\n\r\v\f ","\n"), " \t\r\v\f ")
test_eq(String.normalize_space (""), "")
test_eq(String.normalize_space ("  a  bb    ccc    ddd \n eee f g\n"),
				 "a bb ccc ddd eee f g")
test_eq(String.normalize_space ("  a  bb    ccc    ddd \n eee f g\n"," \t"),
			        "a bb ccc ddd\neee f g\n")
test_eq(String.normalize_space ("  a  bb    ccc    ddd \n eee f g\n","\t "),
			        "a\tbb\tccc\tddd\neee\tf\tg\n")
test_eq(String.normalize_space ("  a  bb    ccc    ddd \n eee f g\n",""),
				 "  a  bb    ccc    ddd \n eee f g\n")
test_eq(String.normalize_space ("  a  bb    ccc   ddd \n eee f g\n","\x2000 "),
			    "a\u2000bb\u2000ccc\u2000ddd\neee\u2000f\u2000g\n")
test_eq(String.normalize_space ("  a  bb   ccc   ddd \n eee f g\n","\xf0000 "),
	"a\U000f0000bb\U000f0000ccc\U000f0000ddd\neee\U000f0000f\U000f0000g\n")

dnl MISSING TEST: String.Iterator

test_any([[
  object it = String.SplitIterator("  foobar gazonk  gurka baz  ", ' ');
  array res = ({});
  foreach(it; ; string part) {
    res += ({ part });
  }
  return equal(res, "  foobar gazonk  gurka baz  "/" ");
]], 1)
test_any([[
  object it = String.SplitIterator("  foobar gazonk  gurka baz  ", ' ');
  return sizeof(it);
]], [[
  sizeof("  foobar gazonk  gurka baz  "/" ");
]])
test_any([[
  object it = String.SplitIterator("foobar gazonk  gurka baz", ' ');
  array res = ({});
  foreach(it; ; string part) {
    res += ({ part });
  }
  return equal(res, "foobar gazonk  gurka baz"/" ");
]], 1)
test_any([[
  object it = String.SplitIterator("foobar gazonk  gurka baz", ' ');
  return sizeof(it);
]], [[
  sizeof("foobar gazonk  gurka baz"/" ");
]])
test_any([[
  object it = String.SplitIterator("  foobar gazonk  gurka baz  ", ' ', 1);
  array res = ({});
  foreach(it; ; string part) {
    res += ({ part });
  }
  return equal(res, "foobar gazonk gurka baz"/" ");
]], 1)
test_any([[
  object it = String.SplitIterator("  foobar gazonk  gurka baz  ", ' ', 1);
  return sizeof(it);
]], [[
  sizeof("foobar gazonk gurka baz"/" ");
]])
test_any([[
  object it = String.SplitIterator("foobar gazonk  gurka baz", ' ', 1);
  array res = ({});
  foreach(it; ; string part) {
    res += ({ part });
  }
  return equal(res, "foobar gazonk gurka baz"/" ");
]], 1)
test_any([[
  object it = String.SplitIterator("foobar gazonk  gurka baz", ' ', 1);
  return sizeof(it);
]], [[
  sizeof("foobar gazonk gurka baz"/" ");
]])

test_eq( String.Replace(({}),({}))(""), "" )
test_eq( String.Replace("bar"/1,"foo"/1)(""), "" )
test_eq( String.Replace("bax"/1,"fox"/1)("bar"), "for" )

test_eq( String.SingleReplace("","")(""), "" )
test_eq( String.SingleReplace("a","b")("bar"), "bbr" )

test_eq(String.int2char(0), "\0")
test_eq(String.int2char(65), "A")
test_eq(String.int2char(256), "\400")
test_eq(String.int2char(65536), "\200000")

test_eq(String.int2hex(0), "0")
test_eq(String.int2hex(1), "1")
test_eq(String.int2hex(-1), "-1")
test_eq(String.int2hex(15), "f")
test_eq(String.int2hex(-15), "-f")
test_eq(String.int2hex(16), "10")
test_eq(String.int2hex(-16), "-10")
test_eq(String.int2hex(-0x80000000), "-80000000")
test_eq(String.int2hex(0x80000000-1), "7fffffff")
test_eq(String.int2hex(-0x800000000), "-800000000")
test_eq(String.int2hex(0x800000000-1), "7ffffffff")
test_eq(String.int2hex(Gmp.mpz(1)), "1")

test_eq(String.string2hex(""), "")
test_eq(String.string2hex("x"), "78")
test_eq(String.string2hex("x\xff"), "78ff")
test_eval_error(return String.string2hex("x\xfff"))

test_eq(String.hex2string(""), "")
test_eq(String.hex2string("ab00"), "\xab\0")
test_eval_error(return String.hex2string("ab0"))
dnl test_eval_error(return String.hex2string("ax"))

test_eq([[ String.implode_nicely( ({ "1","2","3" }) ) ]],[[ "1, 2 and 3" ]])
test_eq([[ String.implode_nicely( ({ "1","2","3" }), "och" ) ]],[[ "1, 2 och 3" ]])
test_eq([[ String.implode_nicely( ({ 1,2,3 }) ) ]],[[ "1, 2 and 3" ]])
test_eq([[ String.implode_nicely( ({ 1,2,3 }), "och" ) ]],[[ "1, 2 och 3" ]])
test_true([[ String.implode_nicely( ({ 1.0,2.0,3.0 }) ) ]])
test_true([[ String.implode_nicely( ({ 1.0,2.0,3.0 }), "och" ) ]])
test_eq([[ String.implode_nicely( ({ "1",2,3 }) ) ]],[[ "1, 2 and 3" ]])
test_eq([[ String.implode_nicely( ({}) ) ]], "")
test_eq([[ String.implode_nicely( ({ 1 }) ) ]], "1")

test_eq([[ String.capitalize( "abc" ) ]], "Abc")
test_eq([[ String.capitalize( "Abc" ) ]], "Abc")
test_eq([[ String.capitalize( "ABC" ) ]], "ABC")
test_eq([[ String.capitalize("-") ]], "-")

test_eq([[ String.sillycaps( "hikaru no go" ) ]], "Hikaru No Go")
test_eq([[ String.sillycaps( "Hikaru No Go" ) ]], "Hikaru No Go")
test_eq([[ String.sillycaps( "HIKARU NO GO" ) ]], "HIKARU NO GO")

test_eq(String.common_prefix(({ "soliloquise" })), "soliloquise")
test_eq(String.common_prefix(({ "muzzle", "muzzy" })), "muzz")
test_eq(String.common_prefix(({ "labyrinth", "diatom" })), "")
test_eq(String.common_prefix(({ "abc", "abc", "abc" })), "abc")
test_eq(String.common_prefix(({})), "")

dnl MISSING TEST: fuzzymatch

test_eq(String.soundex(""),"000")
test_eq(String.soundex("AI"),"A000")
test_eq(String.soundex("anna"),"A500")
test_eq(String.soundex("Martin"),"M635")
test_eq(String.soundex("Pike"),"P200")

test_do([[
  foreach( ",I,II,III,IV,V,VI,VII,VIII,IX,X,XI,XII,XIII,XIV,XV,XVI,XVII,XVIII,XIX,XX"/",";
           int t; string res)
    if(String.int2roman(t)!=res) error("%s should be %s\n", String.int2roman(t), res);
]])
test_eq(String.int2roman(100),"C")
test_eq(String.int2roman(1000),"M")
test_eq(String.int2roman(2000),"MM")
test_eval_error( return String.int2roman(100000); )
test_eval_error( return String.int2roman(-1); )

test_eq(String.int2size(-1),"-1 byte")
test_eq(String.int2size(0),"0 bytes")
test_eq(String.int2size(1),"1 byte")
test_eq(String.int2size(2),"2 bytes")
test_eq(String.int2size(1023),"1023 bytes")
test_eq(String.int2size(1024),"1 kB")
test_eq(String.int2size(1025),"1.0 kB")
test_eq(String.int2size(3<<19), "1.5 MB")
test_eq(String.int2size(pow(1024,2)),"1 MB")
test_eq(String.int2size(pow(1024,3)),"1 GB")
test_eq(String.int2size(pow(1024,4)),"1 TB")
test_eq(String.int2size(pow(1024,5)),"1 PB")
test_eq(String.int2size(pow(1024,6)),"1 EB")
test_eq(String.int2size(pow(1024,7)),"1 ZB")
test_eq(String.int2size(pow(1024,8)),"1 YB")
test_eq(String.int2size(pow(1024,9)),"1024 YB")

dnl MISSING TEST: expand_tabs
dnl MISSING TEST: line_expand_tabs

test_eq([[
  String.HTML.select("language",
      ({ ({ "eng", "English" }),
         ({ "swe", "Swedish" }),
         ({ "nor", "Norwegian" }) }),
      "swe")
]],[[ "<select name=\"language\">\n<option value=\"eng\">English</option>\n<option value=\"swe\" selected=\"selected\">Swedish</option>\n<option value=\"nor\">Norwegian</option>\n</select>" ]])
test_eq([[
  String.HTML.select("language",
      ({ ({ "eng", "English" }),
         ({ "swe", "Swedish" }),
         ({ "nor", "Norwegian" }) }))
]],[[ "<select name=\"language\">\n<option value=\"eng\">English</option>\n<option value=\"swe\">Swedish</option>\n<option value=\"nor\">Norwegian</option>\n</select>" ]])
test_eq([[
  String.HTML.select("language", ({ "eng", "swe", "nor" }), "swe")
]],[[ "<select name=\"language\">\n<option value=\"eng\">eng</option>\n<option value=\"swe\" selected=\"selected\">swe</option>\n<option value=\"nor\">nor</option>\n</select>" ]])
test_eq([[
  String.HTML.select("language", ({ "eng", "swe", "nor" }))
]],[[ "<select name=\"language\">\n<option value=\"eng\">eng</option>\n<option value=\"swe\">swe</option>\n<option value=\"nor\">nor</option>\n</select>" ]])

test_equal(String.secure("foo"),"foo")

dnl MISSING TEST: String.HTML.simple_obox
dnl MISSING TEST: String.HTML.Obox
END_MARKER
