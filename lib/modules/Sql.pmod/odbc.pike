/*
 * $Id$
 *
 * Glue for the ODBC-module
 */

#pike __REAL_VERSION__

// Cannot dump this since the #if constant(...) check below may depend
// on the presence of system libs at runtime.
constant dont_dump_program = 1;

#if constant(Odbc.odbc)
inherit Odbc.odbc;

int|object big_query(object|string q, mapping(string|int:mixed)|void bindings)
{  
  if (!bindings)
    return ::big_query(q);
  return ::big_query(.sql_util.emulate_bindings(q, bindings, this));
}

int|object big_typed_query(object|string q,
			   mapping(string|int:mixed)|void bindings)
{
  if (!bindings)
    return ::big_typed_query(q);
  return ::big_typed_query(.sql_util.emulate_bindings(q, bindings, this));
}

constant list_dbs = Odbc.list_dbs;

//!
class typed_result
{
  inherit odbc::typed_result;

  //! Value to use to represent NULL.
  mixed _null_value = Val.null;

  //! Helper function that scales @[mantissa] by a
  //! factor @expr{10->pow(scale)@}.
  //!
  //! @returns
  //!   Returns an @[Gmp.mpq] object if @[scale] is negative,
  //!   and otherwise an integer (bignum).
  object(Gmp.mpq)|int scale_numeric(int mantissa, int scale)
  {
    if (!scale) return mantissa;
    if (scale > 0) {
      return mantissa * 10->pow(scale);
    }
    return Gmp.mpq(mantissa, 10->pow(-scale));
  }

  //! Function called to create timestamp and date objects.
  //!
  //! @note
  //!   The @[tz_hour] and @[tz_minute] arguments are currently
  //!   neither generated by the low-level code, nor used by
  //!   the current implementation of the function.
  Calendar.ISO.Day|Calendar.ISO.Fraction timestamp_factory(int year,
							   int month,
							   int day,
							   int|void hour,
							   int|void minute,
							   int|void second,
							   int|void nanos,
							   int|void tz_hour,
							   int|void tz_minute)
  {
    if (query_num_arg() <= 3) {
      return Calendar.ISO.Day(year, month, day);
    }
    return Calendar.ISO.Fraction(year, month, day,
				 hour, minute, second, nanos);
  }
}

#else
constant this_program_does_not_exist=1;
#endif /* constant(Odbc.odbc) */
