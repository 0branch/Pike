START_MARKER(8.0)

test_any([[
  ADT.Heap h = ADT.Heap();
  h->push(4);
  h->push(7);
  h->push(1);
  h->push(1);
  if( h->size()!=4 ) return 1;
  if( h->top()!=1 ) return 2;
  if( h->size()!=3 ) return 3;
  if( h->top()!=1 ) return 4;
  if( h->size()!=2 ) return 5;
  if( h->top()!=4 ) return 6;
  if( h->size()!=1 ) return 7;
  if( h->top()!=7 ) return 8;
  if( h->size()!=0 ) return 9;
  return -1;
]], -1)

define(test_cert, ([[
  test_any([[
    string der = Standards.PEM.Messages(#"$1")->get_certificate();
    object o = decode_value(encode_value(Standards.X509.decode_certificate(der)));
    return (o->public_key->rsa || o->public_key->dsa) && 1;
  ]], 1)
]]))

dnl openssl req -x509 -nodes -days 365 -subj "/CN=PikeCert" -md5 -newkey rsa:2048 -out certfile.cer
test_cert(-----BEGIN CERTIFICATE-----
MIIC+TCCAeGgAwIBAgIJAK9S+nXAkU+DMA0GCSqGSIb3DQEBBAUAMBMxETAPBgNV
BAMMCFBpa2VDZXJ0MB4XDTEzMTEyMTIxMjM1MFoXDTE0MTEyMTIxMjM1MFowEzER
MA8GA1UEAwwIUGlrZUNlcnQwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB
AQDacxSu60OEhmtfBd+p9oaQ+4w13Cwp70dwRrjPb/y33sFWKN3YZ+rq/8aNXPUO
GLOyVF6z/BlOBS8t6KBI6lNvozVFqp5cwjA6vncbwMODqB8ZZffgA/dbSTM/xtbb
CSno4ylr4wLVk1tnwZIOS4F2mIR/po1QzwIqTAGdkMEvUkmknqEM2Ifqdb6pNjWh
Icma7MqtYnv7/UBib8Gt8j7hk6Yrv5tj3vOHFTs2MogfIfvRnBkhSR5nMbLorLpc
JqfVr9ZNHX66RzSKl8KHDL8/MvI96lM9eFp0utdjIUU2ApSy94U5BqhrCCzBZxHa
dBQEvUkeX8gYHwmVudSHR5O1AgMBAAGjUDBOMB0GA1UdDgQWBBTvujHuucSU+THc
h188CYrgV2vghjAfBgNVHSMEGDAWgBTvujHuucSU+THch188CYrgV2vghjAMBgNV
HRMEBTADAQH/MA0GCSqGSIb3DQEBBAUAA4IBAQCY8Ix17qoiAEDqV9HdyBzNRaPW
/b7iN5bKjy7Vq1AP0RWIc9Wjcn5cKhk/4d7e7KRYT+Pq3ayLgppoYySA6dXERGj/
fu5ocOR5ZAjNLJG48dV2HzOe3mjFEbfw+SPR8AnNRH4qm0yNhds0e0K8MhrX7uNB
6eZ58rt6uIUVTOKTO1HHlxX7AasgQuiT5CajLReYM6DH/F2YXLF5I4iwTRa2p5Zi
GDAm2I6N+Txm/adCVLjpFtV2b2Mu73yzqjEVm5ruknYPfT/HPnqbmNYJySi8mCd+
Nwq6nXBlwd7hqkELVjumX7/xyRcLY2S9wW2rTwcsQ443KGFYQqJv0/pqGC2g
-----END CERTIFICATE-----)

dnl openssl req -x509 -nodes -days 365 -subj "/CN=PikeCert" -sha1 -newkey dsa:dsaparam.txt -out certfile.cer
test_cert(-----BEGIN CERTIFICATE-----
MIICszCCAnGgAwIBAgIJAOthAQ79O7mMMAkGByqGSM44BAMwEzERMA8GA1UEAwwI
UGlrZUNlcnQwHhcNMTMxMTE5MTc0MDIwWhcNMTQxMTE5MTc0MDIwWjATMREwDwYD
VQQDDAhQaWtlQ2VydDCCAbYwggErBgcqhkjOOAQBMIIBHgKBgQC6vqxjXhAMZSEV
P4pzp0KY+qYnTjM9ieZ27myet+M5qXIjcEg2/XLwLPmPIYOGTm6OlPXADdaEZzOf
j6RLB2PJD6GghC5NbdrewsgGMAuVM7h5uEXRswsbpwxFm2MuPqKtA699cs6fa5hZ
pNZUQPSlrFfkb6/95s/EofMGMQgQmwIVAPUBXOFLS/MYisyLR0Yw/poPC3HlAoGA
EqdyVSDZRLMCONHc7UXNYMecOVgpcy8W9DEg4YfTx6SMp/Ey1mXG/cvvH47NbINS
f88QXrBuJJEzhnQir+AUh31Mj2q/Uy2WKP8IP+kJGNjtFuxyO6YZx2OAc9lHrdvb
AtOD//jnVOjijOG6fnAfBxMkkKWKYojMcDYWsijI6nYDgYQAAoGAWocMqiSNXmuc
wIfYetPQitrmZRDTWizuit/sIcmvIPM0OnqFcxp50QWOaiZmAuL3pEB4CiV2HpIS
Rer5N3/Vp+zMQGgRM1zFKD2qbdmMTOMWUGc3g1AjGGFvDuTYGOIY4RmftR0gt8Y4
E2Dqqk0XbF3CeCrVhmVfa7ej0ByVYhmjUDBOMB0GA1UdDgQWBBRjbUSrAPUt1p8i
8PfVzFv4Dl03LjAfBgNVHSMEGDAWgBRjbUSrAPUt1p8i8PfVzFv4Dl03LjAMBgNV
HRMEBTADAQH/MAkGByqGSM44BAMDMQAwLgIVALDFfQRihjOCqi1vFUi5rnYig/zk
AhUAijRxsj+Q6LEF43H8Wq4quhnZ5wQ=
-----END CERTIFICATE-----)

test_true( Standards.PKCS.Certificate.get_certificate_issuer )
test_true( Standards.PKCS.Certificate.get_certificate_subject )

define(test_asn1, ([[
  test_eq( Standards.ASN1.Types.$1()->record_der("hi"), "hi")
  test_do( Standards.ASN1.Types.$1()->end_decode_constructed(7); )
  test_true( "$1"!="Object" ? stringp(Standards.ASN1.Types.$1()->debug_string()) : 1 )
]]))

test_asn1(Object)
test_asn1(Compound)
test_asn1(String)
test_asn1(Boolean)
test_asn1(Integer)
test_asn1(Enumerated)
test_asn1(Real)
test_asn1(BitString)
test_asn1(OctetString)
test_asn1(Null)
test_asn1(Identifier)
test_asn1(UTF8String)
test_asn1(Sequence)
test_asn1(Set)
test_asn1(PrintableString)
test_asn1(BrokenTeletexString)
test_asn1(TeletexString)
test_asn1(IA5String)
test_asn1(VisibleString)
test_asn1(UTC)
test_asn1(GeneralizedTime)
test_asn1(UniversalString)
test_asn1(BMPString)
test_asn1(MetaExplicit(1,1,0))

test_eq( Standards.ASN1.Decode.primitive(1,0)->record_der("hi"), "hi")
test_do( Standards.ASN1.Decode.primitive(1,0)->end_decode_constructed(7); )
test_true( stringp(Standards.ASN1.Decode.primitive(1,0)->debug_string()) )

test_eq( Standards.ASN1.Decode.constructed(1,0,0)->record_der("hi"), "hi")
test_do( Standards.ASN1.Decode.constructed(1,0,0)->end_decode_constructed(7); )
test_true( stringp(Standards.ASN1.Decode.constructed(1,0,0)->debug_string()) )

test_any([[
  object ctx = SSL.Context();
  object rsa = Crypto.RSA();
  rsa->set_random(random_string);
  rsa->generate_key( 1024 );

  array attrs = ({
    (["organizationName":Standards.ASN1.Types.PrintableString("Test")]),
    (["commonName":Standards.ASN1.Types.PrintableString("*")]),
  });

  string cert =
    Standards.X509.make_selfsigned_certificate(rsa, 3600*24, attrs);

  ctx->certificates = ({ cert });
  ctx->rsa = rsa;

  if( ctx->rsa != rsa ) return 1;
  if( ctx->certificates[0] != cert) return 2;
  ctx->rsa_mode();
  return -1;
]], -1)

test_do( add_constant("DSA", Crypto.DSA()) )
test_do( DSA->generate_key(1024,160) )
test_true( DSA->verify_rsaref("hej", DSA->sign_rsaref("hej")) )
test_true( DSA->verify_ssl( "hej", DSA->sign_ssl("hej")) )
test_do( add_constant("DSA") )

test_eq( Crypto.DH.MODPGroup1->order, Crypto.DH.MODPGroup1->q )

test_true( Tools.X509.make_time )
test_true( Tools.PEM.simple_build_pem )

test_eq( sizeof(Crypto.Random.blocking_random_string(10)), 10 )

END_MARKER