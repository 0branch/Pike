START_MARKER(7.4)

test_equal([[
Array.diff3_old(({"a"}),({"a","b"}),({"b","a"})) ]],
	   ({({({   }),({"a"}),({   })}),
	     ({({   }),({"a"}),({"b"})}),
	     ({({"b"}),({"a"}),({   })})}) )

test_true(arrayp( rusage() ))

ignore_warning("Calling a deprecated value.", [[
  test_eq(hash("hello\12345"), hash_7_4("hello\12345"))
]])

test_compile_error( String.String_buffer x; )
test_eval_error( String.strmult("foo",4); )

test_any([[
  int num_ok = 0;

  Thread.Mutex m = Thread.Mutex();
  Thread.MutexKey l = m->lock();

  void thread_fn()
  {
    m->lock();
    num_ok++;
  };

  array(Thread.Thread) t = (({Thread.thread_create}) * 5) (thread_fn);

  sleep (0.5); // Make sure they are waiting for the lock.
  destruct (m); // Destructs the outstanding lock too.
  sleep (0.5); // Wait for them to finish.

  return num_ok;
]], 5)

test_compile_any([[
  #pragma strict_types
  string x (string s) {return s;}
  void y (void|string s) {x (s);}
]])

// - rusage
test_true(arrayp(rusage()))
test_true(sizeof(rusage())>28)

test_true([[ programp(Regexp) ]])


END_MARKER
