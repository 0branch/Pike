/*
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

#include "global.h"
#include "interpret.h"
#include "module.h"
#include "stralloc.h"
#include "mapping.h"
#include "array.h"
#include "builtin_functions.h"
#include "svalue.h"
#include "pike_types.h"

#include "config.h"

DECLARATIONS

#ifdef HAVE_SASS_H

#include "pike_sass.h"
#include <sass.h>

/*! @module Tools
 */
/*! @module __Sass
 *! @appears Tools.Sass
 */
/*! @class Api
 *! @appears Tools.Sass.Compiler
 */
PIKECLASS Api
{
  /*! @decl int(0..3) output_style = 0
   *! @appears Tools.Sass.Compiler.output_style
   *!
   *! Determines the level of compression on the generated output.
   *!
   *! @seealso
   *!  @[STYLE_NESTED], @[STYLE_EXPANDED], @[STYLE_COMPACT] and
   *!  @[STYLE_COMPRESSED].
   */
  PIKEVAR int(0..3)    output_style;

  /*! @decl string(8bit) source_map_file = UNDEFINED
   *! @appears Tools.Sass.Compiler.source_map_file
   *!
   *! Set the path of the source map file.
   */
  PIKEVAR string(8bit) source_map_file;

  /*! @decl string(8bit) source_map_root
   *! @appears Tools.Sass.Compiler.source_map_root
   *!
   *! Set the root path of the source files, relative to where the source.map
   *! file is written.
   */
  PIKEVAR string(8bit) source_map_root;

  /*! @decl string(8bit) include_path
   *! @appears Tools.Sass.Compiler.include_path
   *!
   *! The base path of @tt{@@import@}s. Note! This needs to be set when
   *! @[compile_string()] is used.
   */
  PIKEVAR string(8bit) include_path;

  /*! @decl int precision
   *! @appears Tools.Sass.Compiler.precision
   *!
   *! Set the precision of fractional numbers. Default is @tt{5@}.
   */
  PIKEVAR int(0..)     precision;

  /*! @decl bool source_comments
   *! @appears Tools.Sass.Compiler.source_comments
   *!
   *! Emit comments in the generated CSS indicating the corresponding source
   *! line. Default is @tt{false@}.
   */
  PIKEVAR int(0..1)    source_comments;

  /*! @decl bool source_map_embed
   *! @appears Tools.Sass.Compiler.source_map_embed
   *!
   *! Set whether embedding @tt{sourceMappingUrl=#@} as data uri or not.
   */
  PIKEVAR int(0..1)    source_map_embed;

  /*! @decl bool omit_source_map_url
   *! @appears Tools.Sass.Compiler.omit_source_map_url
   *!
   *! Set whether writing the @tt{sourceMappingUrl=#@} or not.
   */
  PIKEVAR int(0..1)    omit_source_map_url;


  // Used to resolve external imports. Set by default from the constructor
  // in Compiler in module.pmod.

  /*! @decl protected string|array(string(8bit)) __importer_cb(@
   *!                          string(8bit) path, @
   *!                          void|string(8bit) absolute_path, @
   *!                          void|string(8bit) relative_path)
   *! @appears Tools.Sass.Compiler.__importer_cb
   *!
   *! Importer callback function.
   *!
   *! @param path
   *!  This is the value of `path` in @tt{@@import 'path'@}.
   *! @param absolute_path
   *!  This is the absolute path of the file containing the @tt{@@import@}
   *!  statement.
   *! @param relative_path
   *!  The relative path of @[absolute_path] in relation to the prevoius
   *!  @[absolute_path]
   *!
   *! @returns
   *!  @mixed
   *!   @type int(0..0)
   *!    If undefined is returned the import resolution is given back to
   *!    @tt{libsass@}.
   *!   @type string(8bit)
   *!    The contents of @[path]
   *!   @type array(string(8bit))
   *!    if an array is returned it should contain two indices, where the first
   *!    if the contents of @[path] and the second should be the absolute path
   *!    @[path]. This is only useful (needed) if the Sass files doesn't
   *!    reside in a normal filesystem that @tt{libsass@} can read.
   *!  @endmixed
   */

  PIKEVAR function(
    string(8bit),
    string(8bit) | void,
    string(8bit) | void
    :
    string(8bit) | array(string(8bit))
  ) __importer_cb     flags ID_PROTECTED;


  void set_options (struct Sass_Context *ctx)
  {
    struct Sass_Options *s_opts = sass_context_get_options (ctx);

    sass_option_set_precision (s_opts, THIS->precision);
    sass_option_set_output_style (s_opts, THIS->output_style);

    if (THIS->include_path) {
      sass_option_set_include_path (
        s_opts, sass_copy_c_string (THIS->include_path->str));
    }

    sass_option_set_omit_source_map_url (s_opts, THIS->omit_source_map_url);
    sass_option_set_source_comments (s_opts, THIS->source_comments);

    if (THIS->source_map_file != NULL) {
      sass_option_set_source_map_file (
        s_opts, sass_copy_c_string (THIS->source_map_file->str));
      sass_option_set_omit_source_map_url (s_opts, false);
      sass_option_set_source_map_contents (s_opts, true);
    }
    else {
      sass_option_set_source_map_embed (s_opts, THIS->source_map_embed);
    }

    if (THIS->source_map_root != NULL) {
      sass_option_set_source_map_root (
        s_opts, sass_copy_c_string (THIS->source_map_root->str));
    }
  }


  // Libsass import callback. This will be called for every @import directive
  // in the Sass files. See the doc comment for __importer_cb.
  //
  // FIXME: We probably ought to catch thrown errors from the Pike layer here
  //        and clean up the libsass stuff before really throwing?
  Sass_Import_List pike_sass_importer (const char *path, Sass_Importer_Entry cb,
                                       struct Sass_Compiler *comp)
  {
    SASS_TRACE ("pike_sass_importer(%s)\n", path);

    if (!IS_UNDEFINED(&THIS->__importer_cb)) {
      Sass_Import_Entry last_imp;
      last_imp = sass_compiler_get_last_import (comp);

      push_text (path);

      const char* abs_path = sass_import_get_abs_path (last_imp);
      const char* imp_path = sass_import_get_imp_path (last_imp);

      push_text (abs_path);
      push_text (imp_path);

      apply_svalue (&THIS->__importer_cb, 3);

      if (TYPEOF (Pike_sp[-1]) == T_STRING) {
        Sass_Import_List list = sass_make_import_list (1);
        list[0] = sass_make_import_entry (
                    path,
                    sass_copy_c_string (Pike_sp[-1].u.string->str),
                    0);

        return list;
      }
      // FIXME: I so don't know for real what I'm doing below, there might be
      //        some memory leakage here, so someone with a black belt in C and
      //        the inetrnals of Pike should check this code.
      else if (TYPEOF (Pike_sp[-1]) == T_ARRAY) {
        struct array *v = Pike_sp[-1].u.array;

        if (v->size != 2) {
          Pike_error ("If returning an array from __resolve_import it must "
                      "contain two indices: source and absolute path.\n");
        }

        if (TYPEOF (ITEM(v)[0]) == T_STRING &&
            TYPEOF (ITEM(v)[1]) == T_STRING)
        {
          // Contents of the imported file.
          char* _data = (char *) ITEM(v)[0].u.string->str;
          // Absolute path of the imported file.
          const char* _abs = ITEM(v)[1].u.string->str;

          Sass_Import_List list = sass_make_import_list (1);
          list[0] = sass_make_import (path, _abs,
                                      // libsass takes ownership of _data and
                                      // and will free it when the context
                                      // is destroyd.
                                      sass_copy_c_string(_data),
                                      0);
          return list;
        }
      }
    }

    return NULL;
  }


  void register_importer (struct Sass_Context *ctx)
  {
    struct Sass_Options *s_opts = sass_context_get_options (ctx);

    Sass_Importer_Entry c_imp;
    c_imp = sass_make_importer (pike_sass_importer, 0, 0);

    Sass_Importer_List imp_list = sass_make_importer_list (1);
    sass_importer_set_list_entry (imp_list, 0, c_imp);
    sass_option_set_c_importers (s_opts, imp_list);
  }


#define SASS_COMPILE_FILE_ERR(X...)    \
  do {                                 \
    sass_delete_file_context (ctx);    \
    Pike_error (X);                    \
  } while (0)


  // Compile the file input_file and return the result.
  // This method is over ridden in the the pmod.
  PIKEFUN mapping(string(8bit):string(8bit)) compile_file (string input_file)
  {
    SASS_TRACE ("compile_file(%s)\n", input_file->str);

    struct Sass_File_Context *ctx;
    struct Sass_Context      *ctx_out;

    ctx = sass_make_file_context (sass_copy_c_string (input_file->str));
    ctx_out = sass_file_context_get_context (ctx);

    set_options (ctx_out);
    register_importer (ctx_out);

    int err = sass_compile_file_context (ctx);

    if (err) {
      const char *errstr = sass_context_get_error_message (ctx_out);
      SASS_COMPILE_FILE_ERR ("Sass compile error (code: %d):\n%s\n",
                             err, errstr);
    }

    const char *scss = sass_context_get_output_string (ctx_out);

    if (scss) {
      const char *smap = NULL;
      struct Sass_Options *s_opts = sass_context_get_options (ctx_out);

      if (sass_option_get_source_map_file (s_opts)) {
        smap = sass_context_get_source_map_string (ctx_out);

        if ((err = sass_context_get_error_status (ctx_out))) {
          const char *errstr = sass_context_get_error_message (ctx_out);
          SASS_COMPILE_FILE_ERR ("Failed generating source map (code: %ld): %s",
                                 err, errstr);
        }
      }

      push_constant_text ("css"); push_text (scss);
      push_constant_text ("map");

      if (smap != NULL) {
        push_text (smap);
      }
      else {
        push_undefined ();
      }

      f_aggregate_mapping (4);
    }
    else  {
      push_undefined ();
    }

    sass_delete_file_context (ctx);
  }


#define SASS_COMPILE_STRING_ERR(X...)  \
  do {                                 \
    sass_delete_data_context (ctx);    \
    Pike_error (X);                    \
  } while (0)


  // Compile the string source and return a string.
  // This method is over ridden in the pmod

  /*! @decl string(8bit) compile_string(string(8bit) source)
   *! @appears Tools.Sass.Compiler.compile_string()
   *!
   *! Compiles the string @[source] and returns the generated CSS.
   *!
   *! @note
   *!  If the @[source] contain @tt{@@import@} directives you have to
   *!  explicitly set the include path via @[include_path].
   *!
   *! @param source
   *!  The string to compile
   */
  PIKEFUN mapping(string(8bit):string(8bit))
  compile_string (string(8bit) source)
  {
    struct Sass_Data_Context *ctx;
    struct Sass_Context      *ctx_out;

    ctx = sass_make_data_context (sass_copy_c_string (source->str));
    ctx_out = sass_data_context_get_context (ctx);

    set_options (ctx_out);
    register_importer (ctx_out);

    sass_compile_data_context (ctx);

    int err = sass_context_get_error_status (ctx_out);

    if (err) {
      const char *errstr = sass_context_get_error_message (ctx_out);
      SASS_COMPILE_STRING_ERR ("Sass compile error (code: %ld):\n%s",
                               err, errstr);
    }

    const char *out = sass_context_get_output_string (ctx_out);

    if (out) {
      const char *smap = NULL;
      struct Sass_Options *s_opts = sass_context_get_options (ctx_out);

      if (sass_option_get_source_map_file (s_opts)) {
        smap = sass_context_get_source_map_string (ctx_out);

        if ((err = sass_context_get_error_status (ctx_out))) {
          const char *errstr = sass_context_get_error_message (ctx_out);
          SASS_COMPILE_STRING_ERR ("Failed generating source map (code: %ld): %s",
                                   err, errstr);
        }
      }

      push_constant_text ("css"); push_text (out);
      push_constant_text ("map");

      if (smap != NULL) {
        push_text (smap);
      }
      else {
        push_undefined ();
      }

      f_aggregate_mapping (4);
    }
    else {
      push_undefined ();
    }

    sass_delete_data_context (ctx);
  }

  INIT {
    SASS_TRACE ("INIT __Sass.Api\n");
    THIS->precision = 5;
    THIS->output_style = SASS_STYLE_NESTED;
  }

  EXIT
    gc_trivial;
  {
    SASS_TRACE ("EXIT __Sass.Api\n");
  }
}
/*! @endclass */


/*! @decl string libsass_version()
 *!
 *! Returns the @tt{libsass@} version this module was compiled against
 */
PIKEFUN string libsass_version ()
{
  push_text (libsass_version ());
}


/*! @decl string sass2scss_version()
 *!
 *! Returns the @tt{sass2scss@} version this module was compiled against
 */
PIKEFUN string sass2scss_version ()
{
  push_text (sass2scss_version ());
}


#if HAVE_LIBSASS_LANGUAGE_VERSION
/*! @decl string libsass_language_version()
 *!
 *! Returns the @tt{language@} version of Sass this module was compiled against
 */
PIKEFUN string libsass_language_version ()
{
  push_text (libsass_language_version ());
}
#endif


PIKE_MODULE_INIT
{
  /*! @decl constant LIBSASS_VERSION = ""
   *!
   *! The @tt{libsass@} version, as a string, this module was compiled agains.
   */

  add_string_constant ("LIBSASS_VERSION",   LIBSASS_VERSION, 0);

  /*! @decl constant STYLE_NESTED = 1
   *! @decl constant STYLE_EXPANDED = 1
   *! @decl constant STYLE_COMPACT = 1
   *! @decl constant STYLE_COMPRESSED = 1
   *!
   *! Styling of output. Use as argument to @[Compiler.set_output_style()]
   *!
   *! @string
   *! @value STYLE_NESTED
   *! The default setting. The output will look like:
   *! @code
   *! a {
   *!   property: value;
   *!   other-property: value; }
   *!   a:hover {
   *!     property: value; }
   *! b {
   *!   property: value; }
   *! @endcode
   *!
   *! @value STYLE_EXPANDED
   *! Fully expanded output:
   *! @code
   *! a {
   *!   property: value;
   *!   other-property: value;
   *! }
   *! a:hover {
   *!   property: value;
   *! }
   *! b {
   *!   property: value;
   *! }
   *! @endcode
   *!
   *! @value STYLE_COMPACT
   *! Somewhat minified output:
   *! @code
   *! a { property: value; other-prop: value }
   *! a:hover { property: value; }
   *! b { property: value; }
   *! @endcode
   *!
   *! @value STYLE_COMPRESSED
   *! Minified output
   *! @code
   *! a{property:value;other-property:value}a:hover{property:value}b{property:value}
   *! @endcode
   *! @endstring
   */

  add_integer_constant ("STYLE_NESTED",     SASS_STYLE_NESTED,     0);
  add_integer_constant ("STYLE_EXPANDED",   SASS_STYLE_EXPANDED,   0);
  add_integer_constant ("STYLE_COMPACT",    SASS_STYLE_COMPACT,    0);
  add_integer_constant ("STYLE_COMPRESSED", SASS_STYLE_COMPRESSED, 0);

  /*! @decl constant HTTP_IMPORT_NONE = 0
   *! @decl constant HTTP_IMPORT_GREEDY = 1
   *! @decl constant HTTP_IMPORT_ANY = 2
   *!
   *! Description:
   *!
   *! @string
   *! @value HTTP_IMPORT_NONE
   *!  Default value of @[Compiler.http_import]. Prohibits imports over HTTP.
   *! @value HTTP_IMPORT_GREEDY
   *!  Allow imports over HTTP only if the returned content type is
   *!  @tt{text/scss@}.
   *! @value HTTP_IMPORT_ANY
   *!  Anything goes.
   *! @endstring
   */

  add_integer_constant ("HTTP_IMPORT_NONE",   0, 0);
  add_integer_constant ("HTTP_IMPORT_GREEDY", 1, 0);
  add_integer_constant ("HTTP_IMPORT_ANY",    2, 0);

  INIT
}


PIKE_MODULE_EXIT
{
  EXIT
}

/*! @endmodule
 */
/*! @endmodule
 */

#else  /* HAVE_SASS_H */

PIKE_MODULE_INIT {}
PIKE_MODULE_EXIT {}

#endif /* HAVE_LIBSASS */
