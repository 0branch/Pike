/*
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

#include "config.h"
#include "global.h"
#include "interpret.h"
#include "module.h"
#include "stralloc.h"
#include "mapping.h"
#include "svalue.h"
#include "pike_types.h"

#include <sass.h>

#undef PACKAGE_BUGREPORT
#undef PACKAGE_NAME
#undef PACKAGE_STRING
#undef PACKAGE_TARNAME
#undef PACKAGE_URL
#undef PACKAGE_VERSION

DECLARATIONS

/*! @module Tools
 */
/*! @module __Sass
 *! @appears Tools.Sass
 */

// #define SASS_DEBUG

#ifdef SASS_DEBUG
# define SASS_TRACE(X...) printf ("# " X)
#else
# define SASS_TRACE(X...)
#endif

typedef struct sass_opts {
  int     style;
  char*   include_path;
  long    precision;
  bool    comments;
  char*   map_path;
  bool    map_embed;
  char*   map_root;
  bool    omit_map_url;
} sass_opts;


void set_options (sass_opts *opts, struct Sass_Context *ctx)
{
  struct Sass_Options *s_opts = sass_context_get_options (ctx);

  sass_option_set_precision (s_opts, opts->precision);
  sass_option_set_output_style (s_opts, opts->style);

  if (opts->include_path) {
    sass_option_set_include_path (s_opts, opts->include_path);
    // sass_option_push_include_path (s_opts, opts->include_path);
  }

  sass_option_set_omit_source_map_url (s_opts, opts->omit_map_url);
  sass_option_set_source_comments (s_opts, opts->comments);

  // if (opts->comments) {
  //   sass_option_set_omit_source_map_url (s_opts, false);
  // }

  if (opts->map_path != NULL) {
    sass_option_set_source_map_file (s_opts, opts->map_path);
    sass_option_set_omit_source_map_url (s_opts, false);
    sass_option_set_source_map_contents (s_opts, true);
  }
  else {
    sass_option_set_source_map_embed (s_opts, opts->map_embed);
  }

  if (opts->map_root != NULL) {
    sass_option_set_source_map_root (s_opts, opts->map_root);
  }
}


/*! @class Api
 *! @appears Tools.Sass.SCSS
 */
PIKECLASS Api
{
  CVAR sass_opts* options;


  // Used to resolve external imports. Set by default from the constructor
  // in SCSS in module.pmod.
  PIKEVAR function(string:string) __importer_cb
    flags ID_PRIVATE;


  // Libsass import callback. This will be called for every @import directive
  // in the Sass files. The callback __importer_cb will be called with
  // @path as argument and if @path is an URI __importer_cb will fetch
  // it and return the data as a string. If it's not a string that's retured,
  // e.g. @path was not an URI, NULL is returned from here and libsass will
  // try to resolve @path. If it was an URI a Sass_Import_List will be
  // returned so that the contents of @path will replace the @import directive.
  Sass_Import_List
  pike_sass_string_importer (const char* path, Sass_Importer_Entry cb,
                             struct Sass_Compiler* comp)
  {
    SASS_TRACE ("pike_sass_importer(%s)\n", path);

    if (&THIS->__importer_cb != NULL) {
      push_text (path);

      safe_apply_svalue (&THIS->__importer_cb, 1, 1);

      if (TYPEOF (Pike_sp[-1]) == T_STRING) {
        SASS_TRACE ("Got return value from import: %s\n",
                    Pike_sp[-1].u.string->str);

        Sass_Import_List list = sass_make_import_list (1);
        list[0] = sass_make_import_entry (path, strdup (Pike_sp[-1].u.string->str), 0);

        return list;
      }
    }

    return NULL;
  }


  /* This is a strictly internal method that's called from the constructor of
   * the implementing class inheriting this one. The callback @fn should
   * only resolve external URI:s.
   */
  PIKEFUN void __set_importer_callback(function(string:string) fn)
  flags ID_PROTECTED;
  {
    if (fn && TYPEOF (*fn) == T_FUNCTION) {
      assign_svalue (&THIS->__importer_cb, fn);
    }
    else {
      SIMPLE_ARG_TYPE_ERROR ("fn", 1, "function");
    }
  }


  /*! @decl void set_include_path(string path)
   *! @appears Tools.Sass.SCSS.set_include_path()
   *!
   *! Set include path of @tt{imports@}
   *!
   *! @seealso
   *!  @[get_include_path()]
   *!
   *! @param path
   */
  PIKEFUN void set_include_path (string path)
  {
    if (path && path->len) {
      if (access (path->str, F_OK) == -1) {
        Pike_error ("Include path \"%s\" does not exist!\n", path->str);
      }

      THIS->options->include_path = strdup (path->str);
    }
  }


  /*! @decl string get_include_path()
   *! @appears Tools.Sass.SCSS.get_include_path()
   *!
   *! Get include path of @tt{imports@}
   *!
   *! @seealso
   *!  @[set_include_path()]
   */
  PIKEFUN string get_include_path ()
  {
    const char* p = THIS->options->include_path;

    if (p) {
      push_text (p);
    }
    else {
      push_undefined ();
    }
  }


  /*! @decl void set_output_style(int style)
   *! @appears Tools.Sass.SCSS.set_output_style()
   *!
   *! Set the output style for the generated CSS code.
   *! Default is @[Tools.Sass.STYLE_NESTED].
   *!
   *! @seealso
   *!  @[get_output_style()]
   *!
   *! @param style
   *!  See @[Tools.Sass.STYLE_NESTED], @[Tools.Sass.STYLE_EXPANDED],
   *!  @[Tools.Sass.STYLE_COMPACT] and @[Tools.Sass.STYLE_COMPRESSED]
   */
  PIKEFUN void set_output_style (int style)
  {
    THIS->options->style = style;
  }


  /*! @decl int get_output_style(int style)
   *! @appears Tools.Sass.SCSS.get_output_style()
   *!
   *! Returns the output style of the generated CSS code.
   *!
   *! @seealso
   *!  @[set_output_style()]
   */
  PIKEFUN int get_output_style ()
  {
    RETURN (THIS->options->style);
  }


  /*! @decl void set_source_comments(bool set)
   *! @appears Tools.Sass.SCSS.set_source_comments()
   *!
   *! Emit comments in the generated CSS indicating the corresponding
   *! source line. Default is @tt{false@}.
   *!
   *! @seealso
   *!  @[get_source_comments()]
   */
  PIKEFUN void set_source_comments (int(0..1) set)
  {
    THIS->options->comments = set;
  }


  /*! @decl bool get_source_comments()
   *! @appears Tools.Sass.SCSS.get_source_comments()
   *!
   *! Getter for @[set_source_comments()].
   *!
   *! @seealso
   *!  @[set_source_comments()]
   */
  PIKEFUN int(0..1) get_source_comments ()
  {
    RETURN (THIS->options->comments);
  }


  /*! @decl void set_source_map_file(string path)
   *! @appears Tools.Sass.SCSS.set_source_map_file()
   *!
   *! Path to source map file. Enables the source map generating.
   *! Used to create sourceMappingUrl. If this isn't set no source map will
   *! be generated.
   *!
   *! @note
   *!  This only has effect in @[compile_file()].
   *!
   *! @seealso
   *!  @[get_source_map_file()], @[get_source_map_embed()],
   *!  @[set_source_map_embed()]
   */
  PIKEFUN void set_source_map_file (string path)
  {
    THIS->options->map_path = strdup (path->str);
  }


  /*! @decl string get_source_map_file()
   *! @appears Tools.Sass.SCSS.get_source_map_file()
   *!
   *! Returns the path of the source map file.
   *!
   *! @seealso
   *!  @[set_source_map_file()], @[set_source_map_embed()],
   *!  @[get_source_map_embed()]
   */
  PIKEFUN string get_source_map_file ()
  {
    const char* f = THIS->options->map_path;

    if (f) {
      push_text (f);
    }
    else {
      push_undefined ();
    }
  }


  /*! @decl void set_source_map_embed(bool embed)
   *! @appears Tools.Sass.SCSS.set_source_map_embed()
   *!
   *! Set whether embedding sourceMappingUrl as data uri or not.
   *!
   *! @seealso
   *!  @[get_source_map_embed()], @[set_source_map_file()],
   *!  @[get_source_map_file()]
   *!
   *! @param embed
   */
  PIKEFUN void set_source_map_embed (int(0..1) embed)
  {
    THIS->options->map_embed = embed;
  }


  /*! @decl bool get_source_map_embed()
   *! @appears Tools.Sass.SCSS.get_source_map_embed()
   *!
   *! Will a source map be embedded in the CSS file or not?
   *!
   *! @seealso
   *!  @[set_source_map_embed()], @[set_source_map_file()],
   *!  @[get_source_map_file()]
   */
  PIKEFUN int(0..1) get_source_map_embed ()
  {
    RETURN (THIS->options->map_embed);
  }


  /*! @decl void set_source_map_root(string path)
   *! @appears Tools.Sass.SCSS.set_source_map_root()
   *!
   *! Set the root path of the source files, relative to where the
   *! source.map file is written.
   *!
   *! @seealso
   *!  @[get_source_map_root()], @[set_source_map_file()],
   *!  @[get_source_map_file()]
   *!
   *! @param path
   */
  PIKEFUN void set_source_map_root (string path)
  {
    THIS->options->map_root = strdup (path->str);
  }


  /*! @decl string get_source_map_root()
   *! @appears Tools.Sass.SCSS.get_source_map_root()
   *!
   *! Returns the path of the source maps root.
   *!
   *! @seealso
   *!  @[set_source_map_root()], @[set_source_map_file()],
   *!  @[get_source_map_file()]
   */
  PIKEFUN string get_source_map_root ()
  {
    if (THIS->options->map_root) {
      push_text (THIS->options->map_root);
    }
    else {
      push_undefined ();
    }
  }


  /*! @decl void set_omit_source_map_url(bool embed)
   *! @appears Tools.Sass.SCSS.set_omit_source_map_url()
   *!
   *! Set whether writing sourceMappingUrl or not.
   *!
   *! @seealso
   *!  @[set_source_map_embed()], @[set_source_map_file()],
   *!  @[get_source_map_embed()], @[get_source_map_file()]
   *!
   *! @param embed
   */
  PIKEFUN void set_omit_source_map_url (int(0..1) omit)
  {
    THIS->options->omit_map_url = omit;
  }


  /*! @decl int(0..1) get_omit_source_map_url()
   *! @appears Tools.Sass.SCSS.get_omit_source_map_url()
   *!
   *! Getter for @[set_omit_source_map_url()].
   *!
   *! @seealso
   *!  @[set_omit_source_map_url()],
   *!  @[set_source_map_embed()], @[set_source_map_file()],
   *!  @[get_source_map_embed()], @[get_source_map_file()]
   */
  PIKEFUN int(0..1) get_omit_source_map_url ()
  {
    RETURN (THIS->options->omit_map_url);
  }


  /*! @decl void set_precision(int(0..) p)
   *! @appears Tools.Sass.SCSS.set_precision()
   *!
   *! Set the precision of fractional numbers. Default is @tt{5@}.
   *!
   *! @seealso
   *!  @[get_precision()]
   *!
   *! @param p
   */
  PIKEFUN void set_precision (int(0..) p)
  {
    THIS->options->precision = p;
  }


  /*! @decl int(0..) get_precision()
   *! @appears Tools.Sass.SCSS.get_precision()
   *!
   *! Returns the precision of floating point values
   *!
   *! @seealso
   *!  @[set_precision()]
   */
  PIKEFUN int(0..) get_precision ()
  {
    RETURN (THIS->options->precision);
  }


#define SASS_COMPILE_FILE_ERR(X...)    \
  do {                                 \
    sass_delete_file_context (ctx);    \
    Pike_error (X);                    \
  } while (0)


  // Compile the file input_file and return the result.
  // This method is over ridden in the the pmod.
  PIKEFUN mapping(string:string) compile_file (string input_file)
  {
    SASS_TRACE ("compile_file(%s)\n", input_file->str);

    if (access (input_file->str, F_OK) == -1) {
      Pike_error ("Input file \"%s\" does not exist!\n", input_file->str);
    }

    struct Sass_File_Context* ctx =
      sass_make_file_context (strdup (input_file->str));
    struct Sass_Context* ctx_out = sass_file_context_get_context (ctx);

    set_options (THIS->options, ctx_out);

    int err = sass_compile_file_context (ctx);

    if (err) {
      const char* errstr = strdup (sass_context_get_error_message (ctx_out));
      SASS_COMPILE_FILE_ERR ("Sass compile error (code: %d):\n%s\n",
                             err, errstr);
    }

    const char* scss = sass_context_get_output_string (ctx_out);

    if (scss) {
      // push_text (scss);
      int aggr = 2;
      const char* smap = NULL;
      struct Sass_Options *s_opts = sass_context_get_options (ctx_out);

      if (sass_option_get_source_map_file (s_opts)) {
        smap = sass_context_get_source_map_string (ctx_out);

        if ((err = sass_context_get_error_status (ctx_out))) {
          const char* errstr = strdup (sass_context_get_error_message (ctx_out));
          SASS_COMPILE_FILE_ERR ("Failed generating source map (code: %ld): %s",
                                 err, errstr);
        }

        aggr = 4;
      }

      push_constant_text ("css"); push_text (scss);

      if (smap != NULL) {
        push_constant_text ("map"); push_text (smap);
      }

      f_aggregate_mapping (aggr);
    }
    else  {
      push_undefined ();
    }

    sass_delete_file_context (ctx);
  }


#define SASS_COMPILE_STRING_ERR(X...)  \
  do {                                 \
    sass_delete_data_context (ctx);    \
    Pike_error (X);                    \
  } while (0)


  // Compile the string source and return a string.
  // This method is over ridden in the pmod
  PIKEFUN string(8bit) compile_string (string(8bit) source)
  {
    struct Sass_Data_Context* ctx;
    ctx = sass_make_data_context (strdup (source->str));
    struct Sass_Context* ctx_out = sass_data_context_get_context (ctx);

    set_options (THIS->options, ctx_out);

    struct Sass_Options *s_opts = sass_context_get_options (ctx_out);

    Sass_Importer_Entry c_imp;
    c_imp = sass_make_importer (pike_sass_string_importer, 0, 0);
    Sass_Importer_List imp_list = sass_make_importer_list (1);
    sass_importer_set_list_entry (imp_list, 0, c_imp);
    sass_option_set_c_importers (s_opts, imp_list);

    sass_compile_data_context (ctx);

    int err = sass_context_get_error_status (ctx_out);

    if (err) {
      const char* errstr = strdup (sass_context_get_error_message (ctx_out));
      SASS_COMPILE_STRING_ERR ("Sass compile error (code: %ld):\n%s",
                               err, errstr);
    }

    const char* out = sass_context_get_output_string (ctx_out);
    push_text (out);

    sass_delete_data_context (ctx);
  }

  INIT {
    SASS_TRACE ("INIT __Sass.Api\n");

    THIS->options = (sass_opts *) malloc (sizeof (sass_opts));
    memset (THIS->options, 0, sizeof (sass_opts));

    THIS->options->style = SASS_STYLE_NESTED;
    THIS->options->include_path = NULL;
    THIS->options->precision = 5;
    THIS->options->map_path = NULL;
    THIS->options->map_root = NULL;
    THIS->options->comments = false;
    THIS->options->map_embed = false;
    // THIS->options->map_contents = false;
    THIS->options->omit_map_url = true;
  }

  EXIT {
    SASS_TRACE ("EXIT __Sass.Api\n");

    if (THIS->options->include_path != NULL) {
      free (THIS->options->include_path);
    }

    if (THIS->options->map_path != NULL) {
      free (THIS->options->map_path);
    }

    if (THIS->options->map_root != NULL) {
      free (THIS->options->map_root);
    }

    free (THIS->options);
  }
}
/*! @endclass */


/*! @decl string libsass_version()
 *!
 *! Returns the @tt{libsass@} version this module was compiled against
 */
PIKEFUN string libsass_version()
{
  push_text (libsass_version ());
}


/*! @decl string sass2scss_version()
 *!
 *! Returns the @tt{sass2scss@} version this module was compiled against
 */
PIKEFUN string sass2scss_version()
{
  push_text (sass2scss_version ());
}


#if HAVE_LIBSASS_LANGUAGE_VERSION
/* Returns the @tt{language@} version of Sass this module was compiled against
*/
PIKEFUN string libsass_language_version()
{
  push_text (libsass_language_version ());
}
#endif


PIKE_MODULE_INIT
{
  /*! @decl constant LIBSASS_VERSION = ""
   *!
   *! The @tt{libsass@} version, as a string, this module was compiled agains.
   */

  add_string_constant ("LIBSASS_VERSION",   LIBSASS_VERSION, 0);

  /*! @decl constant STYLE_NESTED = 1
   *! @decl constant STYLE_EXPANDED = 1
   *! @decl constant STYLE_COMPACT = 1
   *! @decl constant STYLE_COMPRESSED = 1
   *!
   *! Styling of output. Use as argument to @[Api.set_output_style()]
   */

  add_integer_constant ("STYLE_NESTED",     SASS_STYLE_NESTED,     0);
  add_integer_constant ("STYLE_EXPANDED",   SASS_STYLE_EXPANDED,   0);
  add_integer_constant ("STYLE_COMPACT",    SASS_STYLE_COMPACT,    0);
  add_integer_constant ("STYLE_COMPRESSED", SASS_STYLE_COMPRESSED, 0);

  /*! @decl constant EXTERNAL_IMPORT_NONE = 0
   *! @decl constant EXTERNAL_IMPORT_GREEDY = 1
   *! @decl constant EXTERNAL_IMPORT_ANY = 2
   */

  add_integer_constant ("EXTERNAL_IMPORT_NONE",   0, 0);
  add_integer_constant ("EXTERNAL_IMPORT_GREEDY", 1, 0);
  add_integer_constant ("EXTERNAL_IMPORT_ANY",    2, 0);

  INIT
}


PIKE_MODULE_EXIT
{
  EXIT
}

/*! @endmodule
 */
/*! @endmodule
 */
