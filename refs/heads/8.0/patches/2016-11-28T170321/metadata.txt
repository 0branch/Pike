subject: Synch with Roxen 6.1.162-r1.
from: 8115ec9c5ab50e2d030e708aae9c6d28f4864d94
to: fa59a63228eae6be3aca116faa7e0455bd0c0164
originator: Administrator
depends: 2016-06-29T083746
restart: true

Multiple fixes:

• Protocols.WebSocket: parse variables early enough

The previous commit (3fd041a5500a) parsed the variables after the
websocket request callback had been called. This commit calls the
websocket request callback after parsing the query string.

• pgsql: Revert portal purge change, race condition was elsewhere.

• pgsql: Fix typo.

• pgsql: Release started statements upon destruct.

• pgsql: Stop at the first non-object portal.

• pgsql: Even wipe the portal list if you start with portal==0.

• Updated to tzdata2016i.

• WebSocket: Revert out deflate code, leave options, upward compatible with 8.1.

• Standards.BSON: Fixed circular dependency.

This fixes failures loading the module when it had been partially dumped.

Fixes [Bug 7806].

• MasterObject: RESOLV_DEBUG should now work again.

Running indices (or values()) on directory nodes is not a good idea,
as that forces them to load all of their content, which is likely to
cause strange errors.

• Added note about curve change for Nettle.

• ADT.Heap: Added low_pop().

This function is analogous to low_peek().

• pgsql: Fix race when connections are closing and receive new commands.

• pgsql: Guard against asynchronous destructs.

• pgsql: Drop callbacks for real, code got lost between commit juggling.

• pgsql: Cater for callbacks waiting for mutex while being destructed.

• pgsql: Eliminate hanging selects.

• pgsql: Drop callbacks on destruct of conxion, force short close.

• pgsql: Fix portal-race for multiple queries in flight on a single descriptor.

• pgsql: Drop termination lock even on exceptions.

Prevent cancelquery() from starting the statemachine.
This was responsible for the majority of the exceptions.

• pgsql: Guard local backend against exceptions.

When pgsql objects where destructed forcibly, the
pgsql-local backend sometimes died due to attempted
accesses in destructed objects.

• Protocols.HTTP.Session: ignore malformed expiry dates in cookies

• SSL [ECC]: Fixed multiple typos.

Fixes broken ECC_CURVES lookup table.

• WebSocket: Fix missing options checks.

• WebSocket: Clear the RSV1 bit after decompression.

• Protocols: Tune default compressionparameters for speed.

• WebSocket: Support for permessage-deflate compression.

• Fix for missing SECP curves.

• Stdio.FakeFile: Improved sendfile compatibility.

• GTK2: Fix return value of get_gravity

• Reference correct function in docs

• SSL.Constants: Fixed typo in name of constant.

• WebSocket: Parse query variables.

• Encode array elements sequentially.

• Refer to the HeaderParser as Protocols.HTTP.Server.HeaderParser instead.

• Protocols.WebSocket: fixed handling of truncated frames

When small frames were not fully in the receive buffer, the frame
parsing could get confused.

• Standards.EXIF: Improved robustness.

Some EXIF files apparently terminate the attribute list chain with
an empty block with no next pointer at the end of the EXIF IFD.

Fixes [bug 7761].

• Don't support infinite looping in exif data.

• Allow for only specific tags to be parsed and the rest ignored.

• Reuse the tag parsing loop.

• Confine the EXIF parsing in its JFIF segment.

• Converted if-train to switch.

• Object Orient harder. Keep offset and byteorder internal to the file object.

• Abort if the tag type can't be parsed.

• Properly parse JPEG headers instead of just brute force scanning first 100
bytes. This avoids false positives or parsing EXIF data in other than APP1
segments, and more importantly finds EXIF data that is further than 100 bytes
from the start of the file (e.g. after ICC profile).

• MasterObject: describe_string() now shows some of the end of the string.

• Refdoc: Fixed a Pike doc error in Nettle.Sign.

• Protocols.LDAP: Support passing an SSL.Context to get_connection().

Sometimes the default SSL.Context isn't appropriate, so support
passing a custom one along to Protocols.LDAP.client().

• Crypto.ECC [JWT]: Zero-pad short signature integers.

Makes sure that the signature generated by jose_sign() always
has the same length for a given Curve.

Likely to fix intermittent testsuite failures where jose signatures
fail to verify.