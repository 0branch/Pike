/*
  Author: Pontus Ã–stlund <https://profiles.google.com/poppanator>
*/
//! Sass is a scripting language that is interpreted into Cascading Style
//! Sheets (CSS). This module is a glue for @tt{libsass@}.
//!
//! @seealso
//!  SASS @url{http://sass-lang.com/@}

#pike __REAL_VERSION__
#require constant(Tools@module@)

inherit Tools@module@;

//! SCSS compiler
//!
//! @example
//! @code
//! Tools.Sass.SCSS compiler = Tools.Sass.SCSS();
//! // Minify the output and create a source map file.
//! compiler->set_options(([
//!   "output_style" : Tools.Sass.STYLE_COMPRESSED
//!   "source_map_file" : "path/to/write/source.map"
//! ]));
//!
//! if (mixed e = catch(compiler->compile_file("input.scss", "output.css"))) {
//!   werror("Failed compiling input.scss to output.css\n");
//! }
//! @endcode
class SCSS
{
  inherit Tools@module@.Api;

  //! Set options to the SASS compiler. @[opts]
  //!
  //! @param opts
  //!  @mapping
  //!   @member int "output_style"
  //!    Any of the @[STYLE_NESTED], @[STYLE_EXPANDED], @[STYLE_COMPACT]
  //!    or @[STYLE_COMPRESSED] constants. See also @[set_output_style()].
  //!   @member string "include_path"
  //!    Path to root of incude files. See also @[set_include_path()].
  //!   @member string "source_map_file"
  //!    File to write source map file to. Only has effect in @[compile_file()].
  //!    See also @[set_source_map_file()].
  //!   @member bool "source_comments"
  //!    Turn on/off comments in the output containing info about the source
  //!    file - line numbers and such. Default of @tt{false@}. See also
  //!    @[set_source_comments()].
  //!   @member bool "source_map_embed"
  //!    Turn on/off if a source map should be embedded in the output or not.
  //!    Default is @tt{false@}. See also @[set_source_map_embed()].
  //!  @endmapping
  void set_options(mapping(string:string|int) opts)
  {
    foreach (opts; string opt; string|int val) {
      switch (opt)
      {
        case "output_style":
          if (!intp(val)) {
            error("Value to set_output_style() must be an integer!\n");
          }
          set_output_style(val);
          break;

        case "include_path":
          if (!stringp(val)) {
            error("Value to set_include_path() must be a string!\n");
          }
          set_include_path(val);
          break;

        case "source_map_file":
          if (!stringp(val)) {
            error("Value to set_source_map_file() must be a string!\n");
          }
          set_source_map_file(val);
          break;

        case "source_map_embed":
          if (!intp(val)) {
            error("Value to set_source_map_embed() must be an int(0..1)!\n");
          }
          set_source_map_embed(val);
          break;

        case "source_map_root":
          if (!stringp(val)) {
            error("Value to set_source_map_root() must be a string!\n");
          }
          set_source_map_root(val);
          break;

        case "omit_source_map":
          if (!intp(val)) {
            error("Value to set_omit_source_map_url() must be an integer!\n");
          }
          set_omit_source_map_url(val);
          break;

        case "source_comments":
          if (!intp(val)) {
            error("Value to set_source_comments() must be an integer!\n");
          }
          set_source_comments(val);
          break;

        default:
          error("Unknown option %O!\n", opt);
      }
    }
  }

  // //! Test if @[set_options()] will be linked to from @[a]?
  // //!
  // //! @param a
  // //!  Just a parameter
  // void test_func(mapping a)
  // {
  //   return a;
  // }
}
