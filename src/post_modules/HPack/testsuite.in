dnl -*- coding: utf-8; -*-

test_compile_error( H )
test_compile_error( S )
test_do( add_constant( "H", lambda(string s) {
  return String.hex2string(s-" "-"\n"-"\t"); } ) )
test_do( add_constant( "S", String.string2hex ) )

dnl First some tests that the huffman codec works.

define(test_huffman_low, [[
  test_eq(S(Standards.HPack.huffman_encode([[$1]])), [[$2]])
  test_eq(Standards.HPack.huffman_decode(H([[$2]])), [[$1]])
  test_eq(Standards.HPack.huffman_decode(Standards.HPack.huffman_encode([[$1]])),[[$1]])
]])

define(test_huffman, [[
  test_huffman_low([["$1"]], [[#"$2" - " " - "\n" - "\t"]])
]])

dnl The test vectors from RFC 7541 appendix C:

dnl RFC 7541 C.4.1
test_huffman([[www.example.com]], [[f1e3 c2e5 f23a 6ba0 ab90 f4ff]])

dnl RFC 7541 C.4.2
test_huffman([[no-cache]], [[a8eb 1064 9cbf]])

dnl RFC 7541 C.4.3
test_huffman([[custom-key]], [[25a8 49e9 5ba9 7d7f]])
test_huffman([[custom-value]], [[25a8 49e9 5bb8 e8b4 bf]])

dnl RFC 7541 C.6.1
test_huffman([[302]], [[6402]])
test_huffman([[private]], [[aec3 771a 4b]])
test_huffman([[Mon, 21 Oct 2013 20:13:21 GMT]],
	     [[d07a be94 1054 d444 a820 0595 040b 8166 e082 a62d 1bff]])
test_huffman([[https://www.example.com]],
	     [[9d29 ad17 1863 c78f 0b97 c8e9 ae82 ae43 d3]])

dnl RFC 7541 C.6.2
test_huffman([[307]], [[640e ff]])

dnl RFC 7541 C.6.3
test_huffman([[Mon, 21 Oct 2013 20:13:22 GMT]],
	     [[d07a be94 1054 d444 a820 0595 040b 8166 e084 a62d 1bff]])
test_huffman([[gzip]], [[9bd9 ab]])
test_huffman([[foo=ASDJKHQKBZXOQWEOPIUAXQWEOIU; max-age=3600; version=1]],
	     [[94e7 821d d7f2 e6c7 b335 dfdf cd5b 3960
	       d5af 2708 7f36 72c1 ab27 0fb5 291f 9587
	       3160 65c0 03ed 4ee5 b106 3d50 07]])

dnl RFC 7541 doesn't contain any vectors that contain characters that
dnl encode to more than one byte, so add one of our own.
dnl This string used to trigger a buffering bug in the encoder.
test_huffman_low(H("c5206920e56120e4206520f62e"),
		 "ffffe4a194ffff38d4ffffa542a9fffffa57")

test_do(add_constant("S"))
test_do(add_constant("H"))
