/* -*- c -*-
|| This file is part of Pike. For copyright information see COPYRIGHT.
|| Pike is distributed under GPL, LGPL and MPL. See the file COPYING
|| for more information.
*/

#include "global.h"
#include "builtin_functions.h"
#include "interpret.h"
#include "module.h"

#include "nettle_config.h"

#ifdef HAVE_LIBHOGWEED

DECLARATIONS

#include "nettle.h"
#include <nettle/dsa.h>
#include <nettle/rsa.h>
#include <gmp.h>

#include "bignum.h"

void random_func_wrapper(void *f, unsigned int num, uint8_t *out)
{
  push_int(num);
  apply_svalue((struct svalue *)f, 1);
  if(TYPEOF(Pike_sp[-1])!=T_STRING)
    Pike_error("Random function did not return string value.\n");
  if(Pike_sp[-1].u.string->len != num)
    Pike_error("Random function did not return correct number of bytes.\n");
  memcpy(out, Pike_sp[-1].u.string->str, num);
  pop_stack();
}

/*! @decl array(object(Gmp.mpz)) @
 *!         dsa_generate_keypair(int p_bits, int q_bits, @
 *!                              function(int:string(0..255)) rnd)
 *!
 *! Generates a DSA key pair with @[p_bits] number of bits (sometimes
 *! referred to as L) for p, and @[q_bits] number of bits (sometimes
 *! referred to as N) for q, using the random function @[rnd].
 *!
 *! Valid combinations as per FIPS 186-3 are
 *! @pre{
 *!   p_bits  q_bits
 *!   1024    160
 *!   2048    224 (rejected by some versions of Hogweed)
 *!   2048    256
 *!   3072    256
 *! @}
 *!
 *! @returns
 *!   @array
 *!     @elem Gmp.mpz 0
 *!       The value p, the modulo.
 *!     @elem Gmp.mpz 1
 *!       The value q, the group order.
 *!     @elem Gmp.mpz 2
 *!       The value g, the generator.
 *!     @elem Gmp.mpz 3
 *!       The value y, the public value.
 *!     @elem Gmp.mpz 4
 *!       The value x, the private value.
 *!   @endarray
 */
PIKEFUN array(object(Gmp.mpz))
  dsa_generate_keypair(int p_bits, int q_bits, function(int:string(0..255)) rnd)
{
  struct dsa_public_key pub;
  struct dsa_private_key key;

  dsa_public_key_init(&pub);
  dsa_private_key_init(&key);

  if( !nettle_dsa_generate_keypair(&pub, &key, rnd, random_func_wrapper,
                                   NULL, NULL, p_bits, q_bits) )
  {
    dsa_private_key_clear(&key);
    dsa_public_key_clear(&pub);

    Pike_error("Illegal parameter value.\n");
  }

  push_bignum((MP_INT *)&pub.p);
  push_bignum((MP_INT *)&pub.q);
  push_bignum((MP_INT *)&pub.g);
  push_bignum((MP_INT *)&pub.y);
  push_bignum((MP_INT *)&key.x);

  dsa_private_key_clear(&key);
  dsa_public_key_clear(&pub);

  f_aggregate(5);
  stack_pop_n_elems_keep_top(args); /* Remove p_bits, q_bits and rnd. */
}

/*! @decl array(object(Gmp.mpz)) @
 *!         rsa_generate_keypair(int bits, int e, function(int:string(0..255)) rnd)
 *!
 *! Generates an RSA key pair with a @[bits] sized modulus (n), using
 *! the provided value for @[e] and random function @[rnd].
 *!
 *! @returns
 *!   @array
 *!     @elem Gmp.mpz 0
 *!       The value n, the modulo.
 *!     @elem Gmp.mpz 1
 *!       The value d, the private exponent.
 *!     @elem Gmp.mpz 2
 *!       The value p, a prime.
 *!     @elem Gmp.mpz 3
 *!       The value q, a prime.
 *!   @endarray
 */
PIKEFUN array(object(Gmp.mpz))
  rsa_generate_keypair(int bits, int e, function(int:string(0..255)) rnd)
{
  struct rsa_public_key pub;
  struct rsa_private_key key;

  rsa_public_key_init(&pub);
  rsa_private_key_init(&key);

  mpz_set_ui(&pub.e, e);

  if( !nettle_rsa_generate_keypair(&pub, &key, rnd, random_func_wrapper,
                                   NULL, NULL, bits, 0) )
  {
    rsa_private_key_clear(&key);
    rsa_public_key_clear(&pub);

    Pike_error("Illegal parameter value.\n");
  }

  push_bignum((MP_INT *)&pub.n);
  push_bignum((MP_INT *)&key.d);
  push_bignum((MP_INT *)&key.p);
  push_bignum((MP_INT *)&key.q);

  rsa_private_key_clear(&key);
  rsa_public_key_clear(&pub);

  f_aggregate(4);
  stack_pop_n_elems_keep_top(args); /* Remove bits, e and rnd. */
}

void
hogweed_init(void)
{
  INIT;
}

void
hogweed_exit(void)
{
  EXIT;
}

#endif
