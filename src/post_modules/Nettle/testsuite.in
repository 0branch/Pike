START_MARKER


dnl The point of these tests are just to make a basic validation that
dnl the cryptography works. We assume that the Nettle library itself
dnl is good, so no need for full NIST test vectors or similar.

test_compile_error( H )
test_compile_error( S )
test_do( add_constant( "H", String.hex2string ) )
test_do( add_constant( "S", String.string2hex ) )

define(test_hash, [[
  cond_resolv(Nettle.$1, [[
      test_eq(String.string2hex(Nettle.$1()->hash("")),#"$2"-" "-"\n")
      test_eq(String.string2hex(Nettle.$1()->hash((string)enumerate(256)*2)),#"$3"-" "-"\n")
      test_eq(String.string2hex(Nettle.$1()->hash("abc")),#"$4"-" "-"\n")
  ]])
]])

test_hash(MD2,
8350e5a3e24c153df2275c9f80692773,
babf93aebc7745aa7e4569e590e6047f,
da853b0d3f88d99b30283a69e6ded6bb)

test_hash(MD4,
31d6cfe0d16ae931b73c59d7e0c089c0,
a1d29a83b83c408e21a056e456036266,
a448017aaf21d8525fc10ae87aa6729d)

test_hash(MD5,
d41d8cd98f00b204e9800998ecf8427e,
f5c8e3c31c044bae0e65569560b54332,
900150983cd24fb0d6963f7d28e17f72)

test_hash(SHA1,
da39a3ee 5e6b4b0d 3255bfef 95601890 afd80709,
dbe649daba340bce7a44b809016d914839b99f10,
a9993e36 4706816a ba3e2571 7850c26c 9cd0d89d)

test_hash(SHA224,
d14a028c 2a3a2bc9 476102bb 288234c4 15a2b01f 828ea62a c5b3e42f,
b8060ccc82d40c576156f7ca0333e4389e410df027d2fb8f764fa603,
23097d22 3405d822 8642a477 bda255b3 2aadbce4 bda0b3f7 e36c9da7)

test_hash(SHA256,
e3b0c442 98fc1c14 9afbf4c8 996fb924 27ae41e4 649b934c a495991b 7852b855,
110009dcee21620b166f3abfecb5eff7a873be729d1c2d53822e7acc5f34eb9b,
ba7816bf 8f01cfea 414140de 5dae2223 b00361a3 96177a9c b410ff61 f20015ad)

test_hash(SHA384,
38b060a751ac9638 4cd9327eb1b1e36a 21fdb71114be0743 4c0cc7bf63f6e1da 274edebfe76f65fb d51ad2f14898b95b,
4582fc82430e526886a1853411e60645fef7e8ea0c8546b7c9ba0c8416d9a98fb52ebd0c605fbb70749c4e3e5da3dbac,
cb00753f45a35e8b b5a03d699ac65007 272c32ab0eded163 1a8b605a43ff5bed 8086072ba1e7cc23 58baeca134c825a7)

test_hash(SHA512,
cf83e1357eefb8bd f1542850d66d8007 d620e4050b5715dc 83f4a921d36ce9ce 47d0d13c5d85f2b0 ff8318d2877eec2f 63b931bd47417a81 a538327af927da3e,
edb9bed721aa6a5f6fbc6619d3a3c2be3d043043f05a9aebc7b1197a2aa9c49a57d5ddd4674c1785785088d9f1ff42c797a02adc9b817a139a50970da6c99524,
ddaf35a193617aba cc417349ae204131 12e6fa4e89a97ea2 0a9eeee64b55d39a 2192992a274fc1a8 36ba3c23a3feebbd 454d4423643ce80e 2a9ac94fa54ca49f)

test_hash(SHA3_224,
f71837502ba8e108 37bdd8d365adb855 91895602fc552b48 b7390abd,
745758db0a62b782f84ba9456749c48d78055734b0383f6c19ce419b,
c30411768506ebe1 c2871b1ee2e87d38 df342317300a9b97 a95ec6a8)

test_hash(SHA3_256,
c5d2460186f7233c 927e7db2dcc703c0 e500b653ca82273b 7bfad8045d85a470,
f55ba327291604f0e5be6651752398b7be2331aad65f5763ce067df95cc13be1,
4e03657aea45a94f c7d47ba826c8d667 c0d1e6e33a64a036 ec44f58fa12d6c45)

test_hash(SHA3_384,
2c23146a63a29acf 99e73b88f8c24eaa 7dc60aa771780ccc 006afbfa8fe2479b 2dd2b21362337441 ac12b515911957ff,
9f74dfc9c6998ba66259906d271b2a2c17195e1682b7bd43774bb7121ead7feeae0399a565b07a7a2b670436d708c960,
f7df1165f033337b e098e7d288ad6a2f 74409d7a60b49c36 642218de161b1f99 f8c681e4afaf31a3 4db29fb763e3c28e)

test_hash(SHA3_512,
0eab42de4c3ceb92 35fc91acffe746b2 9c29a8c366b7c60e 4e67c466f36a4304 c00fa9caf9d87976 ba469bcbe06713b4 35f091ef2769fb16 0cdab33d3670680e,
6f317fd02d2e47a9a2e0aef8ad4f18d17656e8bcc2251599a5767a19fbeda91b496fe56b286cdb26d74f42f0226f8f8da2f6c24987e55f1badb02c4b60991785,
18587dc2ea106b9a 1563e32b3312421c a164c7f1f07bc922 a9c83d77cea3a1e5 d0c6991073902537 2dc14ac964262937 9540c17e2a65b19d 77aa511a9d00bb96)

test_hash(GOST94,
ce85b99cc46752fffee35cab9a7b0278abb4c2d2055cff685af4912c49490f8d,
5242e01f27145a783bf3b0f931f69318ef112ac33ecfa0a3b764e47f3caef9a7,
f3134348c44fb1b2a277729e2285ebb5cb5e0f29c975bc753b70497c06a4d51d)

test_hash(RIPEMD160,
9c1185a5c5e9fc54612808977ee8f548b2258d31,
e18472c9792fdc6e9dc2f46d53daee9ea60a999e,
8eb208f7e05d987a9b044a8e98c6b087f15a0bfc)

dnl Crypto, key, plain, cipher, force/ekb
define(test_cipher,[[
  test_eq(ifelse([[$5]],,
                 [[Nettle.$1()()->set_encrypt_key(String.hex2string($2-" "))
		   ->crypt(String.hex2string($3-" "))]],
		 [[Nettle.$1()()->set_encrypt_key(String.hex2string($2-" "), $5)
		   ->crypt(String.hex2string($3-" "))]]),
	  [[String.hex2string($4-" ")]])
  test_eq(ifelse([[$5]],,
		 [[Nettle.$1()()->set_decrypt_key(String.hex2string($2-" "))
		   ->crypt(String.hex2string($4-" "))]],
		 [[Nettle.$1()()->set_decrypt_key(String.hex2string($2-" "), $5)
		   ->crypt(String.hex2string($4-" "))]]),
	  [[String.hex2string($3-" ")]])
]])

// AES
cond_resolv( Nettle.AES, [[
  test_true([[objectp(Nettle.AES()())]])
  test_cipher(AES,
	      "00010203050607080A0B0C0D0F101112",
	      "506812A45F08C889B97F5980038B8359",
	      "D8F532538289EF7D06B506A4FD5BE9C9")
  test_cipher(AES,
	      "14151617191A1B1C1E1F202123242526",
	      "5C6D71CA30DE8B8B00549984D2EC7D4B",
	      "59AB30F4D4EE6E4FF9907EF65B1FB68C")
]])

// ARCTWO
// Test vectors from RFC 2268.
cond_resolv( Nettle.ARCTWO, [[
  test_true([[objectp(Crypto.Arctwo.State())]])
  test_cipher(ARCTWO,
	      "0000000000000000",
	      "0000000000000000",
	      "ebb773f993278eff",
	      63)
  test_cipher(ARCTWO,
	      "ffffffffffffffff",
	      "ffffffffffffffff",
	      "278b27e42e2f0d49",
	      64)
  test_cipher(ARCTWO,
	      "3000000000000000",
	      "1000000000000001",
	      "30649edf9be7d2c2",
	      64)
  test_cipher(ARCTWO,
	      "88",
	      "0000000000000000",
	      "61a8a244adacccf0",
	      64)
  test_cipher(ARCTWO,
	      "88bca90e90875a",
	      "0000000000000000",
	      "6ccf4308974c267f",
	      64)
  test_cipher(ARCTWO,
	      "88bca90e90875a7f0f79c384627bafb2",
	      "0000000000000000",
	      "1a807d272bbe5db1",
	      64)
  test_cipher(ARCTWO,
	      "88bca90e90875a7f0f79c384627bafb2",
	      "0000000000000000",
	      "2269552ab0f85ca6",
	      128)
  test_cipher(ARCTWO,
	      "88bca90e90875a7f 0f79c384627bafb2"
	      "16f80a6f85920584 c42fceb0be255daf 1e",
	      "0000000000000000",
	      "5b78d3a43dfff1f1",
	      129)
]])

// CAMELLIA
// Test vectors from RFC 3713. 128, 192 and 256 bits.
cond_resolv( Nettle.CAMELLIA, [[
  test_true([[objectp(Nettle.CAMELLIA()())]])
  test_cipher(CAMELLIA,
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "67 67 31 38 54 96 69 73 08 57 06 56 48 ea be 43")
  test_cipher(CAMELLIA,
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10"
              "00 11 22 33 44 55 66 77",
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "b4 99 34 01 b3 e9 96 f8 4e e5 ce e7 d7 9b 09 b9")
  test_cipher(CAMELLIA,
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10"
              "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff",
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "9a cc 23 7d ff 16 d7 6c 20 ef 7c 91 9e 3a 75 09")
]])


dnl From the official ECRYPT project site SVN.
dnl http://www.ecrypt.eu.org/stream/svn/viewcvs.cgi/ecrypt/trunk/submissions/salsa20/full/verified.test-vectors?rev=210&view=markup
dnl 128 bit key, 64 bit IV
dnl set 1, vector #0
cond_resolv( Nettle.SALSA20 [[
  test_any([[
    object o = Nettle.SALSA20()();
    o->set_encrypt_key(String.hex2string("80000000000000000000000000000000"));
    o->set_iv(String.hex2string("0000000000000000"));
    string res = "";
    for(int i; i<8; i++)
      res += o->crypt("\0"*64);
    res = res[0..63] + res[192..255] + res[256..319] + res[448..511];
    return upper_case(String.string2hex(res));
  ]], [[ #"
 4DFA5E481DA23EA09A31022050859936
 DA52FCEE218005164F267CB65F5CFD7F
 2B4F97E0FF16924A52DF269515110A07
 F9E460BC65EF95DA58F740B7D1DBB0AA
 DA9C1581F429E0A00F7D67E23B730676
 783B262E8EB43A25F55FB90B3E753AEF
 8C6713EC66C51881111593CCB3E8CB8F
 8DE124080501EEEB389C4BCB6977CF95
 7D5789631EB4554400E1E025935DFA7B
 3E9039D61BDC58A8697D36815BF1985C
 EFDF7AE112E5BB81E37ECF0616CE7147
 FC08A93A367E08631F23C03B00A8DA2F
 B375703739DACED4DD4059FD71C3C47F
 C2F9939670FAD4A46066ADCC6A564578
 3308B90FFB72BE04A6B147CBE38CC0C3
 B9267C296A92A7C69873F9F263BE9703"-"\n"-" "; ]])
]])

dnl 256 bit key, 64 bit IV
dnl set 1, vector #0
cond_resolv( Nettle.SALSA20 [[
  test_any([[
    object o = Nettle.SALSA20()();
    o->set_encrypt_key(String.hex2string("80000000000000000000000000000000"
                               "00000000000000000000000000000000"));
    o->set_iv(String.hex2string("0000000000000000"));
    string res = "";
    for(int i; i<8; i++)
      res += o->crypt("\0"*64);
    res = res[0..63] + res[192..255] + res[256..319] + res[448..511];
    return upper_case(String.string2hex(res));
  ]], [[ #"
 E3BE8FDD8BECA2E3EA8EF9475B29A6E7
 003951E1097A5C38D23B7A5FAD9F6844
 B22C97559E2723C7CBBD3FE4FC8D9A07
 44652A83E72A9C461876AF4D7EF1A117
 57BE81F47B17D9AE7C4FF15429A73E10
 ACF250ED3A90A93C711308A74C6216A9
 ED84CD126DA7F28E8ABF8BB63517E1CA
 98E712F4FB2E1A6AED9FDC73291FAA17
 958211C4BA2EBD5838C635EDB81F513A
 91A294E194F1C039AEEC657DCE40AA7E
 7C0AF57CACEFA40C9F14B71A4B3456A6
 3E162EC7D8D10B8FFB1810D71001B618
 696AFCFD0CDDCC83C7E77F11A649D79A
 CDC3354E9635FF137E929933A0BD6F53
 77EFA105A3A4266B7C0D089D08F1E855
 CC32B15B93784A36E56A76CC64BC8477"-"\n"-" "; ]])
]])

test_eq( Crypto.AES.CBC()->block_size(), 16)
test_eq( Crypto.AES.CBC()->key_size(), 0)
test_any([[
  object cbc=Crypto.AES.CBC();
  cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
  return cbc->key_size();]], 32)
test_eval_error([[
  object cbc=Crypto.AES.CBC();
  cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
  cbc->crypt("123");
]])
test_any([[
  object cbc=Crypto.AES.CBC();
  cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
  return String.string2hex(cbc->crypt("0123456789abcdef"));
]], "b71a7f6d29d66bd468294ed9cfda2af1")

dnl aead, key, iv, adata, plaintext, crypted, hash
define(test_aead, [[
  test_any([[
    object o = $1();
    o->set_encrypt_key(String.hex2string($2-"\n"));
    o->set_iv(String.hex2string($3-"\n"));
    o->update(String.hex2string($4-"\n"));
    return String.string2hex(o->crypt(String.hex2string($5-"\n"))) +
      "|"+String.string2hex(o->digest());
    ]], $6-"\n"+"|"+$7)
  test_any([[
    object o = $1();
    o->set_decrypt_key(String.hex2string($2-"\n"));
    o->set_iv(String.hex2string($3-"\n"));
    o->update(String.hex2string($4-"\n"));
    return String.string2hex(o->crypt(String.hex2string($6-"\n"))) +
      "|"+String.string2hex(o->digest());
    ]], $5-"\n"+"|"+$7)
]])

cond_resolv( Crypto.AES.GCM, [[
  test_eq( Crypto.AES.GCM()->block_size(), 16 )
  test_eq( Crypto.AES.GCM()->key_size(), 0 )

  dnl NIST GCM AES test vectors

  test_any([[
    object o = Crypto.AES.GCM();
    o->set_encrypt_key(H("00000000000000000000000000000000"));
    o->set_iv(H("000000000000000000000000"));
    return S(o->digest())]], "58e2fccefa7e3061367f1d57a4e7455a")

dnl 1
test_aead(Crypto.AES.GCM,
"00000000000000000000000000000000",
"000000000000000000000000",
"",
"",
"",
"58e2fccefa7e3061367f1d57a4e7455a")

test_aead(Crypto.AES.GCM,
"00000000000000000000000000000000",
"000000000000000000000000",
"",
"00000000000000000000000000000000",
"0388dace60b6a392f328c2b971b2fe78",
"ab6e47d42cec13bdf53a67b21257bddf")

dnl 2
test_aead(Crypto.AES.GCM,
"feffe9928665731c6d6a8f9467308308",
"cafebabefacedbaddecaf888",
"",
#"d9313225f88406e5a55909c5aff5269a
86a7a9531534f7da2e4c303d8a318a72
1c3c0c95956809532fcf0e2449a6b525
b16aedf5aa0de657ba637b391aafd255",
#"42831ec2217774244b7221b784d0d49c
e3aa212f2c02a4e035c17e2329aca12e
21d514b25466931c7d8f6a5aac84aa05
1ba30b396a0aac973d58e091473f5985",
"4d5c2af327cd64a62cf35abd2ba6fab4")

dnl 3
test_aead(Crypto.AES.GCM,
"feffe9928665731c6d6a8f9467308308",
"cafebabefacedbaddecaf888",
#"feedfacedeadbeeffeedfacedeadbeef
abaddad2",
#"d9313225f88406e5a55909c5aff5269a
86a7a9531534f7da2e4c303d8a318a72
1c3c0c95956809532fcf0e2449a6b525
b16aedf5aa0de657ba637b39",
#"42831ec2217774244b7221b784d0d49c
e3aa212f2c02a4e035c17e2329aca12e
21d514b25466931c7d8f6a5aac84aa05
1ba30b396a0aac973d58e091",
"5bc94fbc3221a5db94fae95ae7121a47")

dnl 4
test_aead(Crypto.AES.GCM,
"feffe9928665731c6d6a8f9467308308",
"cafebabefacedbad",
#"feedfacedeadbeeffeedfacedeadbeef
abaddad2",
#"d9313225f88406e5a55909c5aff5269a
86a7a9531534f7da2e4c303d8a318a72
1c3c0c95956809532fcf0e2449a6b525
b16aedf5aa0de657ba637b39",
#"61353b4c2806934a777ff51fa22a4755
699b2a714fcdc6f83766e5f97b6c7423
73806900e49f24b22b097544d4896b42
4989b5e1ebac0f07c23f4598",
"3612d2e79e3b0785561be14aaca2fccb")

dnl 5
test_aead(Crypto.AES.GCM,
"feffe9928665731c6d6a8f9467308308",
#"9313225df88406e555909c5aff5269aa
6a7a9538534f7da1e4c303d2a318a728
c3c0c95156809539fcf0e2429a6b5254
16aedbf5a0de6a57a637b39b",
#"feedfacedeadbeeffeedfacedeadbeef
abaddad2",
#"d9313225f88406e5a55909c5aff5269a
86a7a9531534f7da2e4c303d8a318a72
1c3c0c95956809532fcf0e2449a6b525
b16aedf5aa0de657ba637b39",
#"8ce24998625615b603a033aca13fb894
be9112a5c3a211a8ba262a3cca7e2ca7
01e4a9a4fba43c90ccdcb281d48c7c6f
d62875d2aca417034c34aee5",
"619cc5aefffe0bfa462af43c1699d050")

dnl 7
test_aead(Crypto.AES.GCM,
#"00000000000000000000000000000000
0000000000000000",
"000000000000000000000000",
"",
"00000000000000000000000000000000",
"98e7247c07f0fe411c267e4384b0f600",
"2ff58d80033927ab8ef4d4587514f0fb")

dnl 14
test_aead(Crypto.AES.GCM,
#"00000000000000000000000000000000
00000000000000000000000000000000",
"000000000000000000000000",
"",
"00000000000000000000000000000000",
"cea7403d4d606b6e074ec5d3baf39d18",
"d0d1c8a799996bf0265b98b5d48ab919")

]])

cond_resolv( Crypto.Camellia.GCM, [[
  test_eq( Crypto.Camellia.GCM()->block_size(), 16 )
  test_eq( Crypto.Camellia.GCM()->key_size(), 0 )

  dnl Test vectors from draft-kato-ipsec-camellia-gcm-03 section 4

  dnl Spec Test Case 1 (Camellia-128)
  test_aead(Crypto.Camellia.GCM,
"00000000000000000000000000000000",
"000000000000000000000000",
"",
"",
"",
"f5574acc3148dfcb9015200631024df9")

  dnl Spec Test Case 2 (Camellia-128)
  test_aead(Crypto.Camellia.GCM,
"00000000000000000000000000000000",
"000000000000000000000000",
"",
"00000000000000000000000000000000",
"defe3e0b5c54c94b4f2a0f5a46f6210d",
"f672b94d192266c7c8c8dbb427cc989a")

  dnl Spec Test Case 3 (Camellia-128)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308",
"cafebabefacedbaddecaf888",
"",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b391aafd255",
"d0d94a13b632f337a0cc9955b94fa020c815f903aab12f1efaf2fe9d90f729a6"
"cccbfa986ef2ff2c33de418d9a2529091cf18fe652c1cfde13f8260614bab815",
"86e318012dd8329dc9dae6a170f61b24")

  dnl Spec Test Case 4 (Camellia-128)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308",
"cafebabefacedbaddecaf888",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"d0d94a13b632f337a0cc9955b94fa020c815f903aab12f1efaf2fe9d90f729a6"
"cccbfa986ef2ff2c33de418d9a2529091cf18fe652c1cfde13f82606",
"9f458869431576ea6a095456ec6b8101")

  dnl Spec Test Case 5 (Camellia-128)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308",
"cafebabefacedbad",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"28fd7434d5cd424a5353818fc21a982460d20cf632eb1e6c4fbfca17d5abcf6a"
"52111086162fe9570e7774c7a912aca3dfa10067ddaad40688645bdd",
"e86f8f2e730c49d536f00fb5225d28b1")

  dnl Spec Test Case 6 (Camellia-128)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308",
"9313225df88406e555909c5aff5269aa6a7a9538534f7da1e4c303d2a318a728"
"c3c0c95156809539fcf0e2429a6b525416aedbf5a0de6a57a637b39b",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"2e582b8417c93f2ff4f6f7ee3c361e4496e710ee12433baa964987d02f42953e"
"402e6f4af407fe08cd2f35123696014c34db19128df4056faebcd647",
"ceae5569b2af8641572622731aed3e53")
]])

cond_resolv( Crypto.Camellia.GCM, [[
  dnl Spec Test Case 7 (Camellia-192)
  test_aead(Crypto.Camellia.GCM,
"000000000000000000000000000000000000000000000000",
"000000000000000000000000",
"",
"",
"",
"ba9ae89fddce4b51131e17c4d65ce587")

  dnl Spec Test Case 8 (Camellia-192)
  test_aead(Crypto.Camellia.GCM,
"000000000000000000000000000000000000000000000000",
"000000000000000000000000",
"",
"00000000000000000000000000000000",
"8f9c0aa2549714c88bb2665e8af86d41",
"783cff5c5aca7197320658a74279ab37")

  dnl Spec Test Case 9 (Camellia-192)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c",
"cafebabefacedbaddecaf888",
"",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b391aafd255",
"0f009e88410d84ad93c90d55efbe20ffa855492f4dfd0fb485c4f02f536feffb"
"b4d967729e5c67f1de0750255cc500716ba483eb3b0a2bf607af28f6a60bb2e9",
"8d645a0b0e48d3c3b60a014157cb49b4")

  dnl Spec Test Case 10 (Camellia-192)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c",
"cafebabefacedbaddecaf888",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"0f009e88410d84ad93c90d55efbe20ffa855492f4dfd0fb485c4f02f536feffb"
"b4d967729e5c67f1de0750255cc500716ba483eb3b0a2bf607af28f6",
"01b15bb5ab6fac0c422014e91eacbf2b")

  dnl Spec Test Case 11 (Camellia-192)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c",
"cafebabefacedbad",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"678b3dcb270faa206dc5f6fbb5014996e86d6f3e35cdcdfeb03b37b9b06ff4ff"
"2682248823bd3c84124dc76af7bde3dd440c228b5efbc795dd80dfb6",
"f876143d933214a5035ff0bb96ff650b")

  dnl Spec Test Case 12 (Camellia-192)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c",
"9313225df88406e555909c5aff5269aa6a7a9538534f7da1e4c303d2a318a728"
"c3c0c95156809539fcf0e2429a6b525416aedbf5a0de6a57a637b39b",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"9733ea567c3bad2259ccd63ef7012f5de709e50b1fdc31f1a16db02ede1b66f1"
"1dcc4d953f2d4d4671587b65882afbf9545fdb6deab22413d091b703",
"4b72e520b2521e63d240ed5c903216fa")
]])

cond_resolv( Crypto.Camellia.GCM, [[
  dnl Spec Test Case 13 (Camellia-256)
  test_aead(Crypto.Camellia.GCM,
"0000000000000000000000000000000000000000000000000000000000000000",
"000000000000000000000000",
"",
"",
"",
"9cdb269b5d293bc5db9c55b057d9b591")

  dnl Spec Test Case 14 (Camellia-256)
  test_aead(Crypto.Camellia.GCM,
"0000000000000000000000000000000000000000000000000000000000000000",
"000000000000000000000000",
"",
"00000000000000000000000000000000",
"3d4b2cde666761ba5dfb305178e667fb",
"284b63bb143c40ce100fb4dea6bb617b")

  dnl Spec Test Case 15 (Camellia-256)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c6d6a8f9467308308",
"cafebabefacedbaddecaf888",
"",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b391aafd255",
"ad142c11579dd95e41f3c1f324dabc255864d920f1b65759d8f560d4948d4477"
"58dfdcf77aa9f62581c7ff572a037f810cb1a9c4b3ca6ed638179b776549e092",
"c912686270a2b9966415fca3be75c468")

  dnl Spec Test Case 16 (Camellia-256)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c6d6a8f9467308308",
"cafebabefacedbaddecaf888",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"ad142c11579dd95e41f3c1f324dabc255864d920f1b65759d8f560d4948d4477"
"58dfdcf77aa9f62581c7ff572a037f810cb1a9c4b3ca6ed638179b77",
"4e4b178d8fe26fdc95e2e7246dd94bec")

  dnl Spec Test Case 17 (Camellia-256)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c6d6a8f9467308308",
"cafebabefacedbad",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"6ca95fbb7d16577a9ef2fded94dc85b5d40c629f6bef2c649888e3cbb0ededc7"
"810c04b12c2983bbbbc482e16e45c9215ae12c15c55f2f4809d06652",
"e6472b8ebd331bfcc7c0fa63ce094461")

  dnl Spec Test Case 18 (Camellia-256)
  test_aead(Crypto.Camellia.GCM,
"feffe9928665731c6d6a8f9467308308feffe9928665731c6d6a8f9467308308",
"9313225df88406e555909c5aff5269aa6a7a9538534f7da1e4c303d2a318a728"
"c3c0c95156809539fcf0e2429a6b525416aedbf5a0de6a57a637b39b",
"feedfacedeadbeeffeedfacedeadbeefabaddad2",
"d9313225f88406e5a55909c5aff5269a86a7a9531534f7da2e4c303d8a318a72"
"1c3c0c95956809532fcf0e2449a6b525b16aedf5aa0de657ba637b39",
"e0cddd7564d09c4dc522dd65949262bbf9dcdb07421cf67f3032becb7253c284"
"a16e5bf0f556a308043f53fab9eebb526be7f7ad33d697ac77c67862",
"5791883f822013f8bd136fc36fb9946b")

]])

cond_resolv( Crypto.AES.Buffer, [[
  test_eq( Crypto.AES.Buffer()->block_size(), 16)
  test_eq( Crypto.AES.Buffer()->key_size(), 0)
  test_any([[
    object proxy=Crypto.AES.Buffer();
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->key_size();]], 32)
  test_any([[
    object proxy=Crypto.AES.Buffer();
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    string r = "";
    foreach( "0123456789abcdefg"/1, string str )
      r += proxy->crypt(str);
    return r;
  ]], String.hex2string("b71a7f6d29d66bd468294ed9cfda2af1"))
  test_any([[
    object proxy=Crypto.AES.Buffer();
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->crypt("123");
  ]], "")
]])

test_do([[
  object x = Crypto.AES.CBC();
  x->set_encrypt_key ("\0" * 16);
  x->set_iv ("\0" * 16);
  x->crypt ("x" * 10000000);
]])

cond_resolv(Crypto.AES.Buffer, [[
  test_do([[
    object x = Crypto.AES.Buffer();
    x->set_encrypt_key ("0" * 32);
    x->crypt ("x" * 10000000);
  ]])
]])

cond_resolv( Nettle.Yarrow, [[
  test_any_equal([[
    object y = Nettle.Yarrow()->seed("What happen? Somebody set up us the bomb.");
    return ({ y->get_seed(), y->random_string(20), y->get_seed(), y->random_string(20) });
  ]], [[({String.hex2string("73a35b2f896a8061be0ad434a592a43a82b81b9ed6c018f1c5a51300bbc8d53d"),
	  String.hex2string("7847458e32fb789ff6b6cd6e1c8cc3712ba532a8"),
	  String.hex2string("73a35b2f896a8061be0ad434a592a43a82b81b9ed6c018f1c5a51300bbc8d53d"),
	  String.hex2string("49a090656a6d93782e169994f41005a3616d3cd7")})]])
]])

test_do( add_constant("F",Nettle.Fortuna()); )
dnl Fortuna starts with "\0"*32 as key and "\0"*16 as counter.
test_equal( Crypto.AES()->set_encrypt_key("\0"*32)->crypt("\0"*16), F->random_string(16) )
dnl One rekey event. Counter is 3.
test_any([[
  object aes=Crypto.AES()->set_encrypt_key("\0"*32);
  string key = aes->crypt("\0"*15+"\1") + aes->crypt("\0"*15+"\2");
  return aes->set_encrypt_key(key)->crypt("\0"*15+"\3");
]], F->random_string(16))
test_do( add_constant("F"); )

// crypt_md5

test_eq(Nettle.crypt_md5("",""), "qRPK7m23GJusamGpoGLby/")
test_eq(Nettle.crypt_md5("","",""), "oF5jz0K0HEfDANLadsTNI.")
test_eq(Nettle.crypt_md5("","","$1$"), "qRPK7m23GJusamGpoGLby/")

dnl From openssl passwd examples for option -1 (BSD)
test_eq(Nettle.crypt_md5("password","xxxxxxxx"), "UYCIxa628.9qXjpQCjM4a.")
dnl From openssl passwd examples for option -apr1
test_eq(Nettle.crypt_md5("password","xxxxxxxx","$apr1$"), "dxHfLAsjHkDRmG83UXe8K0")
dnl From John's sample hashes on http://openwall.info/wiki/
test_eq(Nettle.crypt_md5("password","O3JMY.Tw"), "AdLnLjQ/5jXF9.MTp3gHv/")
dnl GNU test vector
test_eq(Nettle.crypt_md5("GNU libc manual","/iSaq7rB"), "EoUw5jJPPvAPECNaaWzMK/")
dnl From cpan.org MD5Crypt.pm
test_eq(Nettle.crypt_md5("passphrase","Vd3f8aG6"), "GcsdF4YCXb0PM2UmXjIoI1")
dnl From PHP CRYPT_MD5 crypt() example
test_eq(Nettle.crypt_md5("rasmuslerdorf","rasmusle"), "rISCgZzpwk3UhDidwXvin0")
dnl From Python passlib.hash.md5_crypt
test_eq(Nettle.crypt_md5("password","3azHgidD"), "SrJPt7B.9rekpmwJwtON31")

// hogweed
test_eval_error(Nettle.dsa_generate_keypair(1024,1,random_string))
test_eval_error(Nettle.rsa_generate_keypair(512,4,random_string))
test_eval_error(Nettle.rsa_generate_keypair(512,1,random_string))
test_eval_error(Nettle.rsa_generate_keypair(88,0x10001,random_string))
test_eval_error(Nettle.ECC_Curve(0,0,0))
test_eval_error(Nettle.ECC_Curve(1,192,0))
test_eval_error(Nettle.ECC_Curve(1,0,1))

test_do([[
  add_constant("T",
	       lambda(string in) {
	         return Gmp.bignum(in-" "-"\n",16);
	       });
]])

dnl test_ecdsa(curve, gwx, gwy, w, k, hash, r, s)
define(test_ecdsa,[[
test_do([[
  add_constant("C", Nettle.ECC_Curve(1, $1, 1));
]])
test_equal([[
  // Verify derivation of the public key.
  C * T(#"$4")
]], [[
  ({ T(#"$2"), T(#"$3") })
]])
test_any([[
  // Validate signing.
  object e = C.ECDSA();
  e->set_private_key(T(#"$4")); // w
  string pool = H(#"$5"-" "-"\n"); // k
  string rnd(int s) {
    if(s==0) error("random called with 0.\n");
    if(s>sizeof(pool)) error("More random than needed requested.\n");
    string r = pool[..s-1];
    pool = pool[s..];
    return r;
  };
  e->set_random(rnd);
  array rs = e->raw_sign(H(#"$6"-" "-"\n")); // hash
  return rs[0]==T(#"$7") && rs[1]==T(#"$8"); // r, s
]], 1)
test_any([[
  // Validate the signature check.
  object e = C.ECDSA();
  e->set_public_key(T(#"$2"), T(#"$3")); // gwx, gwy
  return e->raw_verify(H(#"$6"-" "-"\n"), T(#"$7"), T(#"$8"));
]], 1)
test_do([[ add_constant("C"); ]])
]])

// RFC 4754
test_ecdsa(256,
2442A5CC 0ECD015F A3CA31DC 8E2BBC70 BF42D60C BCA20085 E0822CB0 4235E970,
6FC98BD7 E50211A4 A27102FA 3549DF79 EBCB4BF2 46B80945 CDDFE7D5 09BBFD7D,
DC51D386 6A15BACD E33D96F9 92FCA99D A7E6EF09 34E70975 59C27F16 14C88A7F,
9E56F509 196784D9 63D1C0A4 01510EE7 ADA3DCC5 DEE04B15 4BF61AF1 D5A6DECE,
BA7816BF 8F01CFEA 414140DE 5DAE2223 B00361A3 96177A9C B410FF61 F20015AD,
CB28E099 9B9C7715 FD0A80D8 E47A7707 9716CBBF 917DD72E 97566EA1 C066957C,
86FA3BB4 E26CAD5B F90B7F81 899256CE 7594BB1E A0C89212 748BFF3B 3D5B0315)

test_ecdsa(384,
96281BF8 DD5E0525 CA049C04 8D345D30 82968D10 FEDF5C5A CA0C64E6 465A97EA
 5CE10C9D FEC21797 41571072 1F437922,
447688BA 94708EB6 E2E4D59F 6AB6D7ED FF9301D2 49FE49C3 3096655F 5D502FAD
 3D383B91 C5E7EDAA 2B714CC9 9D5743CA,
0BEB6466 34BA8773 5D77AE48 09A0EBEA 865535DE 4C1E1DCB 692E8470 8E81A5AF
 62E528C3 8B2A81B3 5309668D 73524D9F,
B4B74E44 D71A13D5 68003D74 89908D56 4C7761E2 29C58CBF A1895009 6EB7463B
 854D7FA9 92F934D9 27376285 E63414FA,
CB00753F 45A35E8B B5A03D69 9AC65007 272C32AB 0EDED163 1A8B605A 43FF5BED
 8086072B A1E7CC23 58BAECA1 34C825A7,
FB017B91 4E291494 32D8BAC2 9A514640 B46F53DD AB2C6994 8084E293 0F1C8F7E
 08E07C9C 63F2D21A 07DCB56A 6AF56EB3,
B263A130 5E057F98 4D38726A 1B468741 09F417BC A112674C 528262A4 0A629AF1
 CBB9F516 CE0FA7D2 FF630863 A00E8B9F)

test_ecdsa(521,
0151518F 1AF0F563 517EDD54 85190DF9 5A4BF57B 5CBA4CF2 A9A3F647 4725A35F
 7AFE0A6D DEB8BEDB CD6A197E 592D4018 8901CECD 650699C9 B5E456AE A5ADD190
 52A8,
006F3B14 2EA1BFFF 7E2837AD 44C9E4FF 6D2D34C7 3184BBAD 90026DD5 E6E85317
 D9DF45CA D7803C6C 20035B2F 3FF63AFF 4E1BA64D 1C077577 DA3F4286 C58F0AEA
 E643,
0065FDA3 409451DC AB0A0EAD 45495112 A3D813C1 7BFD34BD F8C1209D 7DF58491
 20597779 060A7FF9 D704ADF7 8B570FFA D6F062E9 5C7E0C5D 5481C5B1 53B48B37
 5FA1,
00C1C2B3 05419F5A 41344D7E 4359933D 734096F5 56197A9B 244342B8 B62F46F9
 373778F9 DE6B6497 B1EF825F F24F42F9 B4A4BD73 82CFC337 8A540B1B 7F0C1B95
 6C2F,
DDAF35A1 93617ABA CC417349 AE204131 12E6FA4E 89A97EA2 0A9EEEE6 4B55D39A
 2192992A 274FC1A8 36BA3C23 A3FEEBBD 454D4423 643CE80E 2A9AC94F A54CA49F,
0154FD38 36AF92D0 DCA57DD5 341D3053 988534FD E8318FC6 AAAAB68E 2E6F4339
 B19F2F28 1A7E0B22 C269D93C F8794A92 78880ED7 DBB8D936 2CAEACEE 54432055
 2251,
017705A7 030290D1 CEB605A9 A1BB03FF 9CDD521E 87A696EC 926C8C10 C8362DF4
 97536710 1F67D1CF 9BCCBF2F 3D239534 FA509E70 AAC851AE 01AAC68D 62F86647
 2660)

test_do( add_constant( "T" ) )
test_do( add_constant( "H" ) )
test_do( add_constant( "S" ) )

END_MARKER
