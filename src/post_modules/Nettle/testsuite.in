START_MARKER


dnl The point of these tests are just to make a basic validation that
dnl the cryptography works. We assume that the Nettle library itself
dnl is good, so no need for full NIST test vectors or similar.

define(test_hash, [[
  cond_resolv(Nettle.$1, [[
      test_eq(String.string2hex(Nettle.$1()->hash("")),#"$2"-" "-"\n")
      test_eq(String.string2hex(Nettle.$1()->hash((string)enumerate(256)*2)),#"$3"-" "-"\n")
      test_eq(String.string2hex(Nettle.$1()->hash("abc")),#"$4"-" "-"\n")
  ]])
]])

test_hash(MD2,
8350e5a3e24c153df2275c9f80692773,
babf93aebc7745aa7e4569e590e6047f,
da853b0d3f88d99b30283a69e6ded6bb)

test_hash(MD4,
31d6cfe0d16ae931b73c59d7e0c089c0,
a1d29a83b83c408e21a056e456036266,
a448017aaf21d8525fc10ae87aa6729d)

test_hash(MD5,
d41d8cd98f00b204e9800998ecf8427e,
f5c8e3c31c044bae0e65569560b54332,
900150983cd24fb0d6963f7d28e17f72)

test_hash(SHA1,
da39a3ee 5e6b4b0d 3255bfef 95601890 afd80709,
dbe649daba340bce7a44b809016d914839b99f10,
a9993e36 4706816a ba3e2571 7850c26c 9cd0d89d)

test_hash(SHA224,
d14a028c 2a3a2bc9 476102bb 288234c4 15a2b01f 828ea62a c5b3e42f,
b8060ccc82d40c576156f7ca0333e4389e410df027d2fb8f764fa603,
23097d22 3405d822 8642a477 bda255b3 2aadbce4 bda0b3f7 e36c9da7)

test_hash(SHA256,
e3b0c442 98fc1c14 9afbf4c8 996fb924 27ae41e4 649b934c a495991b 7852b855,
110009dcee21620b166f3abfecb5eff7a873be729d1c2d53822e7acc5f34eb9b,
ba7816bf 8f01cfea 414140de 5dae2223 b00361a3 96177a9c b410ff61 f20015ad)

test_hash(SHA384,
38b060a751ac9638 4cd9327eb1b1e36a 21fdb71114be0743 4c0cc7bf63f6e1da 274edebfe76f65fb d51ad2f14898b95b,
4582fc82430e526886a1853411e60645fef7e8ea0c8546b7c9ba0c8416d9a98fb52ebd0c605fbb70749c4e3e5da3dbac,
cb00753f45a35e8b b5a03d699ac65007 272c32ab0eded163 1a8b605a43ff5bed 8086072ba1e7cc23 58baeca134c825a7)

test_hash(SHA512,
cf83e1357eefb8bd f1542850d66d8007 d620e4050b5715dc 83f4a921d36ce9ce 47d0d13c5d85f2b0 ff8318d2877eec2f 63b931bd47417a81 a538327af927da3e,
edb9bed721aa6a5f6fbc6619d3a3c2be3d043043f05a9aebc7b1197a2aa9c49a57d5ddd4674c1785785088d9f1ff42c797a02adc9b817a139a50970da6c99524,
ddaf35a193617aba cc417349ae204131 12e6fa4e89a97ea2 0a9eeee64b55d39a 2192992a274fc1a8 36ba3c23a3feebbd 454d4423643ce80e 2a9ac94fa54ca49f)

test_hash(SHA3_224,
f71837502ba8e108 37bdd8d365adb855 91895602fc552b48 b7390abd,
745758db0a62b782f84ba9456749c48d78055734b0383f6c19ce419b,
c30411768506ebe1 c2871b1ee2e87d38 df342317300a9b97 a95ec6a8)

test_hash(SHA3_256,
c5d2460186f7233c 927e7db2dcc703c0 e500b653ca82273b 7bfad8045d85a470,
f55ba327291604f0e5be6651752398b7be2331aad65f5763ce067df95cc13be1,
4e03657aea45a94f c7d47ba826c8d667 c0d1e6e33a64a036 ec44f58fa12d6c45)

test_hash(SHA3_384,
2c23146a63a29acf 99e73b88f8c24eaa 7dc60aa771780ccc 006afbfa8fe2479b 2dd2b21362337441 ac12b515911957ff,
9f74dfc9c6998ba66259906d271b2a2c17195e1682b7bd43774bb7121ead7feeae0399a565b07a7a2b670436d708c960,
f7df1165f033337b e098e7d288ad6a2f 74409d7a60b49c36 642218de161b1f99 f8c681e4afaf31a3 4db29fb763e3c28e)

test_hash(SHA3_512,
0eab42de4c3ceb92 35fc91acffe746b2 9c29a8c366b7c60e 4e67c466f36a4304 c00fa9caf9d87976 ba469bcbe06713b4 35f091ef2769fb16 0cdab33d3670680e,
6f317fd02d2e47a9a2e0aef8ad4f18d17656e8bcc2251599a5767a19fbeda91b496fe56b286cdb26d74f42f0226f8f8da2f6c24987e55f1badb02c4b60991785,
18587dc2ea106b9a 1563e32b3312421c a164c7f1f07bc922 a9c83d77cea3a1e5 d0c6991073902537 2dc14ac964262937 9540c17e2a65b19d 77aa511a9d00bb96)

test_hash(GOST94,
ce85b99cc46752fffee35cab9a7b0278abb4c2d2055cff685af4912c49490f8d,
5242e01f27145a783bf3b0f931f69318ef112ac33ecfa0a3b764e47f3caef9a7,
f3134348c44fb1b2a277729e2285ebb5cb5e0f29c975bc753b70497c06a4d51d)

test_hash(RIPEMD160,
9c1185a5c5e9fc54612808977ee8f548b2258d31,
e18472c9792fdc6e9dc2f46d53daee9ea60a999e,
8eb208f7e05d987a9b044a8e98c6b087f15a0bfc)

dnl Crypto, key, plain, cipher, force/ekb
define(test_cipher,[[
  test_eq(ifelse([[$5]],,
                 [[Nettle.$1()()->set_encrypt_key(String.hex2string($2-" "))
		   ->crypt(String.hex2string($3-" "))]],
		 [[Nettle.$1()()->set_encrypt_key(String.hex2string($2-" "), $5)
		   ->crypt(String.hex2string($3-" "))]]),
	  [[String.hex2string($4-" ")]])
  test_eq(ifelse([[$5]],,
		 [[Nettle.$1()()->set_decrypt_key(String.hex2string($2-" "))
		   ->crypt(String.hex2string($4-" "))]],
		 [[Nettle.$1()()->set_decrypt_key(String.hex2string($2-" "), $5)
		   ->crypt(String.hex2string($4-" "))]]),
	  [[String.hex2string($3-" ")]])
]])

// AES
cond_resolv( Nettle.AES, [[
  test_true([[objectp(Nettle.AES()())]])
  test_cipher(AES,
	      "00010203050607080A0B0C0D0F101112",
	      "506812A45F08C889B97F5980038B8359",
	      "D8F532538289EF7D06B506A4FD5BE9C9")
  test_cipher(AES,
	      "14151617191A1B1C1E1F202123242526",
	      "5C6D71CA30DE8B8B00549984D2EC7D4B",
	      "59AB30F4D4EE6E4FF9907EF65B1FB68C")
]])

// ARCTWO
// Test vectors from RFC 2268.
cond_resolv( Nettle.ARCTWO, [[
  test_true([[objectp(Crypto.Arctwo.State())]])
  test_cipher(ARCTWO,
	      "0000000000000000",
	      "0000000000000000",
	      "ebb773f993278eff",
	      63)
  test_cipher(ARCTWO,
	      "ffffffffffffffff",
	      "ffffffffffffffff",
	      "278b27e42e2f0d49",
	      64)
  test_cipher(ARCTWO,
	      "3000000000000000",
	      "1000000000000001",
	      "30649edf9be7d2c2",
	      64)
  test_cipher(ARCTWO,
	      "88",
	      "0000000000000000",
	      "61a8a244adacccf0",
	      64)
  test_cipher(ARCTWO,
	      "88bca90e90875a",
	      "0000000000000000",
	      "6ccf4308974c267f",
	      64)
  test_cipher(ARCTWO,
	      "88bca90e90875a7f0f79c384627bafb2",
	      "0000000000000000",
	      "1a807d272bbe5db1",
	      64)
  test_cipher(ARCTWO,
	      "88bca90e90875a7f0f79c384627bafb2",
	      "0000000000000000",
	      "2269552ab0f85ca6",
	      128)
  test_cipher(ARCTWO,
	      "88bca90e90875a7f 0f79c384627bafb2"
	      "16f80a6f85920584 c42fceb0be255daf 1e",
	      "0000000000000000",
	      "5b78d3a43dfff1f1",
	      129)
]])

// CAMELLIA
// Test vectors from RFC 3713. 128, 192 and 256 bits.
cond_resolv( Nettle.CAMELLIA, [[
  test_true([[objectp(Nettle.CAMELLIA()())]])
  test_cipher(CAMELLIA,
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "67 67 31 38 54 96 69 73 08 57 06 56 48 ea be 43")
  test_cipher(CAMELLIA,
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10"
              "00 11 22 33 44 55 66 77",
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "b4 99 34 01 b3 e9 96 f8 4e e5 ce e7 d7 9b 09 b9")
  test_cipher(CAMELLIA,
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10"
              "00 11 22 33 44 55 66 77 88 99 aa bb cc dd ee ff",
              "01 23 45 67 89 ab cd ef fe dc ba 98 76 54 32 10",
              "9a cc 23 7d ff 16 d7 6c 20 ef 7c 91 9e 3a 75 09")
]])


dnl From the official ECRYPT project site SVN.
dnl http://www.ecrypt.eu.org/stream/svn/viewcvs.cgi/ecrypt/trunk/submissions/salsa20/full/verified.test-vectors?rev=210&view=markup
dnl 128 bit key, 64 bit IV
dnl set 1, vector #0
cond_resolv( Nettle.SALSA20 [[
  test_any([[
    object o = Nettle.SALSA20()();
    o->set_encrypt_key(String.hex2string("80000000000000000000000000000000"));
    o->set_iv(String.hex2string("0000000000000000"));
    string res = "";
    for(int i; i<8; i++)
      res += o->crypt("\0"*64);
    res = res[0..63] + res[192..255] + res[256..319] + res[448..511];
    return upper_case(String.string2hex(res));
  ]], [[ #"
 4DFA5E481DA23EA09A31022050859936
 DA52FCEE218005164F267CB65F5CFD7F
 2B4F97E0FF16924A52DF269515110A07
 F9E460BC65EF95DA58F740B7D1DBB0AA
 DA9C1581F429E0A00F7D67E23B730676
 783B262E8EB43A25F55FB90B3E753AEF
 8C6713EC66C51881111593CCB3E8CB8F
 8DE124080501EEEB389C4BCB6977CF95
 7D5789631EB4554400E1E025935DFA7B
 3E9039D61BDC58A8697D36815BF1985C
 EFDF7AE112E5BB81E37ECF0616CE7147
 FC08A93A367E08631F23C03B00A8DA2F
 B375703739DACED4DD4059FD71C3C47F
 C2F9939670FAD4A46066ADCC6A564578
 3308B90FFB72BE04A6B147CBE38CC0C3
 B9267C296A92A7C69873F9F263BE9703"-"\n"-" "; ]])
]])

dnl 256 bit key, 64 bit IV
dnl set 1, vector #0
cond_resolv( Nettle.SALSA20 [[
  test_any([[
    object o = Nettle.SALSA20()();
    o->set_encrypt_key(String.hex2string("80000000000000000000000000000000"
                               "00000000000000000000000000000000"));
    o->set_iv(String.hex2string("0000000000000000"));
    string res = "";
    for(int i; i<8; i++)
      res += o->crypt("\0"*64);
    res = res[0..63] + res[192..255] + res[256..319] + res[448..511];
    return upper_case(String.string2hex(res));
  ]], [[ #"
 E3BE8FDD8BECA2E3EA8EF9475B29A6E7
 003951E1097A5C38D23B7A5FAD9F6844
 B22C97559E2723C7CBBD3FE4FC8D9A07
 44652A83E72A9C461876AF4D7EF1A117
 57BE81F47B17D9AE7C4FF15429A73E10
 ACF250ED3A90A93C711308A74C6216A9
 ED84CD126DA7F28E8ABF8BB63517E1CA
 98E712F4FB2E1A6AED9FDC73291FAA17
 958211C4BA2EBD5838C635EDB81F513A
 91A294E194F1C039AEEC657DCE40AA7E
 7C0AF57CACEFA40C9F14B71A4B3456A6
 3E162EC7D8D10B8FFB1810D71001B618
 696AFCFD0CDDCC83C7E77F11A649D79A
 CDC3354E9635FF137E929933A0BD6F53
 77EFA105A3A4266B7C0D089D08F1E855
 CC32B15B93784A36E56A76CC64BC8477"-"\n"-" "; ]])
]])

cond_resolv( Nettle.CBC, [[
  test_eval_error( Nettle.CBC( class{} ) )
  test_eval_error( object o=class{}(); Nettle.CBC(o); )
  test_eval_error([[
    class A {
      int block_size() { return 0; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.CBC(A);
  ]])
  test_eval_error([[
    class A {
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.CBC(A);
  ]])
  test_do([[
    class A {
      int block_size() { return 512; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      int `()() { return 0; }
      string crypt(string data) {}
    };
    Nettle.CBC(A);
  ]])
  test_eq( Nettle.CBC(Crypto.AES())->block_size(), 16)
  test_eq( Nettle.CBC(Crypto.AES)->block_size(), 16)
  test_eq( Nettle.CBC(Crypto.AES())->key_size(), 0)
  test_eq( Nettle.CBC(Crypto.AES)->key_size(), 0)
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES());
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return cbc->key_size();]], 32)
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES);
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return cbc->key_size();]], 32)
  test_eval_error([[
    object cbc=Nettle.CBC(Crypto.AES());
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    cbc->crypt("123");
  ]])
  test_eval_error([[
    object cbc=Nettle.CBC(Crypto.AES);
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    cbc->crypt("123");
  ]])
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES());
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return String.string2hex(cbc->crypt("0123456789abcdef"));
  ]], "b71a7f6d29d66bd468294ed9cfda2af1")
  test_any([[
    object cbc=Nettle.CBC(Crypto.AES);
    cbc->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return String.string2hex(cbc->crypt("0123456789abcdef"));
  ]], "b71a7f6d29d66bd468294ed9cfda2af1")
  
]])

cond_resolv( Nettle.Proxy, [[
  test_eval_error( Nettle.Proxy( class{} ) )
  test_eval_error( object o=class{}(); Nettle.Proxy(o); )
  test_eval_error([[
    class A {
      int block_size() { return 0; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.Proxy(A);
  ]])
  test_eval_error([[
    class A {
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      string crypt(string data) {}
    };
    Nettle.Proxy(A);
  ]])
  test_do([[
    class A {
      int block_size() { return 512; }
      int key_size() { return 0; }
      void set_encrypt_key(string key) { }
      void set_decrypt_key(string key) { }
      int `()() { return 0; }
      string crypt(string data) {}
    };
    Nettle.Proxy(A);
  ]])
  test_eq( Nettle.Proxy(Crypto.AES())->block_size(), 16)
  test_eq( Nettle.Proxy(Crypto.AES)->block_size(), 16)
  test_eq( Nettle.Proxy(Crypto.AES())->key_size(), 0)
  test_eq( Nettle.Proxy(Crypto.AES)->key_size(), 0)
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES());
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->key_size();]], 32)
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES);
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->key_size();]], 32)
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES());
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    string r = "";
    foreach( "0123456789abcdefg"/1, string str )
      r += proxy->crypt(str);
    return r;
  ]], String.hex2string("b71a7f6d29d66bd468294ed9cfda2af1"))
  test_any([[
    object proxy=Nettle.Proxy(Crypto.AES);
    proxy->set_encrypt_key("qwertyuiopasdfghjklzxcvbnm123456");
    return proxy->crypt("123");
  ]], "")
  
]])
	  
cond_resolv( Nettle.CBC, [[
test_tests(
  array(int) a() {
    return Tools.Testsuite.run_script (({"]]SRCDIR[[/rijndaeltest.pike",
				         "--quick"}));
  }
)

test_do([[
  object x = Nettle.CBC (Crypto.AES);
  x->set_encrypt_key ("\0" * 16);
  x->set_iv ("\0" * 16);
  x->crypt ("x" * 10000000);
]])
]])

cond_resolv(Nettle.Proxy, [[
  test_do([[
    object x = Crypto.Buffer (Crypto.AES);
    x->set_encrypt_key ("0" * 32);
    x->crypt ("x" * 10000000);
  ]])
]])

cond_resolv( Nettle.Yarrow, [[
  test_any_equal([[
    object y = Nettle.Yarrow()->seed("What happen? Somebody set up us the bomb.");
    return ({ y->get_seed(), y->random_string(20), y->get_seed(), y->random_string(20) });
  ]], [[({String.hex2string("73a35b2f896a8061be0ad434a592a43a82b81b9ed6c018f1c5a51300bbc8d53d"),
	  String.hex2string("7847458e32fb789ff6b6cd6e1c8cc3712ba532a8"),
	  String.hex2string("73a35b2f896a8061be0ad434a592a43a82b81b9ed6c018f1c5a51300bbc8d53d"),
	  String.hex2string("49a090656a6d93782e169994f41005a3616d3cd7")})]])
]])

// crypt_md5

test_eq(Nettle.crypt_md5("",""), "qRPK7m23GJusamGpoGLby/")
test_eq(Nettle.crypt_md5("","",""), "oF5jz0K0HEfDANLadsTNI.")
test_eq(Nettle.crypt_md5("","","$1$"), "qRPK7m23GJusamGpoGLby/")

dnl From openssl passwd examples for option -1 (BSD)
test_eq(Nettle.crypt_md5("password","xxxxxxxx"), "UYCIxa628.9qXjpQCjM4a.")
dnl From openssl passwd examples for option -apr1
test_eq(Nettle.crypt_md5("password","xxxxxxxx","$apr1$"), "dxHfLAsjHkDRmG83UXe8K0")
dnl From John's sample hashes on http://openwall.info/wiki/
test_eq(Nettle.crypt_md5("password","O3JMY.Tw"), "AdLnLjQ/5jXF9.MTp3gHv/")
dnl GNU test vector
test_eq(Nettle.crypt_md5("GNU libc manual","/iSaq7rB"), "EoUw5jJPPvAPECNaaWzMK/")
dnl From cpan.org MD5Crypt.pm
test_eq(Nettle.crypt_md5("passphrase","Vd3f8aG6"), "GcsdF4YCXb0PM2UmXjIoI1")
dnl From PHP CRYPT_MD5 crypt() example
test_eq(Nettle.crypt_md5("rasmuslerdorf","rasmusle"), "rISCgZzpwk3UhDidwXvin0")
dnl From Python passlib.hash.md5_crypt
test_eq(Nettle.crypt_md5("password","3azHgidD"), "SrJPt7B.9rekpmwJwtON31")

// hogweed
test_eval_error(Nettle.dsa_generate_keypair(1024,1,random_string))
test_eval_error(Nettle.dsa_generate_keypair(511,160,random_string))
test_eval_error(Nettle.rsa_generate_keypair(512,4,random_string))
test_eval_error(Nettle.rsa_generate_keypair(512,1,random_string))
test_eval_error(Nettle.rsa_generate_keypair(88,0x10001,random_string))

END_MARKER
