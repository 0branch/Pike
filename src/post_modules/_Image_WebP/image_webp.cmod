#include "pike_macros.h"
#include "object.h"
#include "constants.h"
#include "interpret.h"
#include "svalue.h"
#include "threads.h"
#include "array.h"
#include "mapping.h"
#include "pike_error.h"
#include "threads.h"
#include "module_support.h"
#include "program_id.h"

#include "modules/Image/image.h"
#include "config.h"

#ifdef HAVE_LIBVPX

DECLARATIONS

#include <vpx/vpx_decoder.h>
#include <vpx/vp8dx.h>
#include <vpx/vpx_encoder.h>
#include <vpx/vp8cx.h>

struct yuv
{
    unsigned int sz;
    unsigned int xsize, ysize;
    unsigned int stride, uvstride;
    unsigned char *Y;
    unsigned char *U;
    unsigned char *V;
};

// Copy every third byte of src to dest.
static void copy_row( unsigned char*dest, 
                      unsigned char*src,
                      int xs )
{
    while(xs--)
    {
        *dest++ = *src;
        src += 3;
    }
}


// Copy two rows down to a single one with half the length.
// Simple linear averaging used for the scaling.
static void copy_row_down( unsigned char*dest, 
                           unsigned char*src, unsigned char*src2,
                           int xs )
{
    int xp;
    for( xp = 0; xp<xs-2; xp+=2 )
    {
        *dest++ = (*src + *(src+3) + *src2 + *(src2+3))>>2;
        src += 6;
        src2 += 6;
    }
    if( xp < xs )
        *dest++ = (*src + *src2 ) >> 1;
}

static inline void free_yuv( struct yuv *x )
{
    free(x);
}

static struct yuv *allocate_yuv( int w, int h )
{
    struct yuv *res;

    int halfpic, sz, halfrow = (w+1)>>1;

    if( halfrow & 1 ) halfrow++;
    halfpic = halfrow * h/2;
    sz = 
        sizeof( struct yuv ) +
        w*h     +  /* Y */
        halfpic +  /* U */
        halfpic;   /* V */

    res = xalloc( sz );
    res->stride = w;
    res->uvstride = halfrow;
    res->sz = sz;
    res->xsize = w;
    res->ysize = h;

    res->Y = (unsigned char*)(res + 1);
    res->U = res->Y + w*h;
    res->V = res->U + halfpic;
    return res;
}

static struct yuv *convert_to_yuv( struct object *img )
{
    struct image *idat = (struct image *)img->storage;
    struct yuv *res = allocate_yuv( idat->xsize, idat->ysize );
    unsigned int yp, xp, o = 0;
    int halfrow = res->uvstride;

    apply(img, "rgb_to_yuv", 0);
    // This creates a new image object, now on the top of the stack.
    idat = (struct image *)Pike_sp[-1].u.object->storage;

    // Sample UV to half size. Copy Y as-is.
    for( yp=0; yp<res->ysize; yp++ )
    {
        rgb_group  *srow = idat->img + yp*idat->xsize;
        copy_row( res->Y + yp*res->xsize,  &srow->g, res->xsize);

        if( (yp & 1) == 0 )
        {
            copy_row_down( res->V + (yp/2)*halfrow,
                           &srow->r,
                           &((yp < res->ysize ? srow + res->xsize : srow )->r),
                           res->xsize );

            copy_row_down( res->U + (yp/2)*halfrow,
                           &srow->b,
                           &((yp < res->ysize ? srow + res->xsize : srow )->b),
                           res->xsize );
        }
    }
    pop_stack(); // Free the generated temporary image-object.

    return res;
}

static struct object *convert_to_rgb( struct yuv *yuv )
{
    struct object *img;
    struct image *idat;
    unsigned int xp, yp;

    push_text( "Image.Image" );
    APPLY_MASTER( "resolv", 1 );
    push_int( yuv->xsize );
    push_int( yuv->ysize );
    apply_svalue( Pike_sp-3, 2 );
    stack_swap();
    pop_stack();



    idat = (struct image *)Pike_sp[-1].u.object->storage;

    for( yp = 0; yp<yuv->ysize; yp++ )
    {
        rgb_group *row = idat->img + yp*yuv->xsize;
        int hpos = (yp>>1)*((yuv->xsize+1)>>1);
        int pos = yp * yuv->xsize;

        for( xp = 0; xp<yuv->xsize; xp++, row++, pos++ )
        {
            if( xp & 1 ) hpos++;

            row->r = yuv->V[ hpos ];
            row->g = yuv->Y[ pos ];
            row->b = yuv->U[ hpos ];
        }
    }
    apply( Pike_sp[-1].u.object, "yuv_to_rgb", 0 );
    Pike_sp--;
    return Pike_sp[0].u.object;
}


/*! @decl string encode( Image.Image x, void|mapping(string:int) parameters )
 *!
 *! Encodes and Image.Image object to a WebP data stream.
 *!
 *! The following parameters are recognized:
 *! @mapping
 *! @member int "quality"
 *!  The overall quality of the generated image, 0 to 100.
 *!  Default is 80.
 *! @member int "sharpness"
 *!  Affects the filtering strength of the in-loop filter.
 *!  default is 0, maximum is 7.
 *! @member int "denoise"
 *!  This affect the pre-processing stage, where the source is
 *!  first denoised before encoding.
 *!  default is no denoise (0), maximum is 6.
 *! @member int "profile"
 *!  Overall control of the filtering streength.
 *!  default (0) is to do full filtering, max setting is 2 (no filtering)
 *! @member int "threads"
 *!   The maximum number of threads to use when encoding. For large
 *!   images setting this high will increase perfornance. Default is
 *!   to only use one thread.
 *! @member int "quantize"
 *!   An alternative way to specify the quality. 
 *!   If used the quality member must not be used.
 *!   0 to 63, 0 is maximum quality, 63 is lowest.
 *! @member int "maxtime"
 *!   How much time the encoder is allowed to use, in microseconds
 *!   Default is 0, which means unlimited time.
 *!   1 means to do the encoding as quickly as possible.
 *!   This is realmtime, not cpu-time, so on a multi-cpu machine increasing 
 *!   the number of threads will improve the result for non-zero times.
 *! @endmapping
 */
PIKEFUN string encode( object(Image.Image) x, void|mapping(string:int) params )
{
    int quality = 80, sharpness = 0, denoise = 0, profile = 0, 
        threads=1, quantize=-1, maxtime;
    int err;
    struct pike_string *res = NULL;
    struct image *img = (struct image *)x->storage;
    vpx_codec_ctx_t enc;
    vpx_codec_enc_cfg_t cfg;
    vpx_image_t vpx_image;
    struct yuv *yuv_image;
    const int riff_header_size = 20;


    if( img->xsize < 2 || img->ysize < 2 )
        Pike_error("Can not encode images smaller than 2x2\n");

    if( img->xsize > 16383 || img->ysize > 16383 )
        Pike_error("Can not encode images larger than 16383 in any dimension\n");

#define PARAM(X) if( (pe = simple_mapping_string_lookup( params, #X )) ) X = pe->u.integer;

    if( params )
    {
        struct svalue *pe;
        PARAM(quality);
        PARAM(denoise);
        PARAM(sharpness);
        PARAM(profile);
        PARAM(threads);
        PARAM(quantize);
        PARAM(maxtime);
        if( quantize != -1 && quality != 80 )
            Pike_error("It is not possible to specify both quality and quantize\n");
    }

    memset( &vpx_image, 0, sizeof(vpx_image));

    yuv_image = convert_to_yuv( x );

    if( vpx_img_wrap(&vpx_image, VPX_IMG_FMT_I420, img->xsize, img->ysize, 1, yuv_image->Y) != &vpx_image )
        Pike_error("image wrap failed\n");
/*    
    assert(vpx_image.planes[VPX_PLANE_Y] == yuv->Y );
    assert(vpx_image.planes[VPX_PLANE_U] == yuv->U);
    assert(vpx_image.planes[VPX_PLANE_V] == yuv->V);
    assert(vpx_image.strides[VPX_PLANE_Y] = yuv->stride);
    assert(vpx_image.strides[VPX_PLANE_U] = yuv->uvstride);
    assert(vpx_image.strides[VPX_PLANE_V] = yuv->uvstride);
*/
    if( quality > 100 )  quality = 100;

    // quantize goes from 63..0
    if( quantize == -1 )
    {
        quantize = 63 - ((quality * 63)/100);
    }

    memset( &cfg, 0, sizeof(cfg) );
    if( (err = vpx_codec_enc_config_default(&vpx_codec_vp8_cx_algo, &cfg, 0)) != VPX_CODEC_OK )
        Pike_error("Vp8 codec initalization failed; %d\n", err);

    cfg.g_threads = threads;
    cfg.rc_min_quantizer = quantize;
    cfg.rc_max_quantizer = quantize;
    cfg.kf_mode = VPX_KF_DISABLED;
    cfg.g_w = img->xsize;
    cfg.g_h = img->ysize;
    cfg.rc_resize_allowed = 0;
    cfg.g_profile = profile;

    if( (err=vpx_codec_enc_init(&enc, &vpx_codec_vp8_cx_algo, &cfg, 0)) != VPX_CODEC_OK )
        Pike_error("Vp8 codec initalization failed (2); %d\n", err);

#define VCC(X,Y) if( (err=vpx_codec_control( &enc, X, Y )) != VPX_CODEC_OK ) Pike_error("Failed to set " #X " to " #Y ": %d\n",err)

    VCC(VP8E_SET_NOISE_SENSITIVITY, denoise);
    VCC(VP8E_SET_SHARPNESS, sharpness);

    if( (err=vpx_codec_encode(&enc, &vpx_image, 0, 1, VPX_EFLAG_FORCE_KF, maxtime))
        == VPX_CODEC_OK )
    {
        vpx_codec_iter_t iter = NULL;
        const vpx_codec_cx_pkt_t* pkt;

        while( (pkt = vpx_codec_get_cx_data(&enc, &iter)) )
        {
            if( pkt->kind == VPX_CODEC_CX_FRAME_PKT )
            {
                const size_t pad = pkt->data.frame.sz & 1;
                const size_t payload_size = pkt->data.frame.sz + pad;
                res = begin_shared_string( riff_header_size + payload_size );
                memcpy(res->str + riff_header_size,
                       (const void*)(pkt->data.frame.buf),
                       pkt->data.frame.sz);
                if (pad)
                    res->str[riff_header_size + pkt->data.frame.sz] = 0;
            }
        }
    }
    else
    {
        vpx_codec_destroy( &enc );
        Pike_error("Failed to encode data; %d\n", err);
    }
    {
        char *p = res->str;
        int data_len = res->len - 20;
#define WRITE_INT( X, I ) do{(X)[0] = (((I)>>0)&255);(X)[1] = (((I)>>8)&255);(X)[2] = (((I)>>16)&255);(X)[3] = (((I)>>24)&255);}while(0)
#define WRITE_STR( X, S ) do{strcpy(X,S);}while(0)
        WRITE_STR(p,"RIFF");     p += 4;
        WRITE_INT(p,res->len-8); p += 4;
        WRITE_STR(p,"WEBP");     p += 4;
        WRITE_STR(p,"VP8 ");     p += 4;
        WRITE_INT(p,data_len );
#undef WRITE_INT
#undef WRITE_STR
    }
    vpx_codec_destroy( &enc );
    push_string( end_shared_string( res ) );

}


/*! @decl Image.Image decode( string data, void|mapping(string:int) parameters )
 *!
 *! Decodes a WebP datastream to an Image.Image object.
 *!
 *! The following parameters are recognized:
 *! @mapping
 *! @member int "deblock"
 *!   Strength  of the deblocking filter. Default is 4, maximum is 16.
 *!   0 means no deblocking is done.
 *! @member int "noise"
 *!   Strength  of the added noise. Default is 0, maximum is 16.
 *!   0 (the default) means that no noise is added.
 *! @endmapping
 */
PIKEFUN object(Image.Image) decode( string data, void|mapping params )
{
    int deblock = 4, noise = 0;
    
    unsigned char *p = (unsigned char *)data->str;
    int len;
    struct yuv *yuv = NULL;
    vpx_codec_ctx_t dec;
    vp8_postproc_cfg_t ppcfg;

    if( params )
    {
        struct svalue *pe;
        PARAM(deblock);
        PARAM(noise);
    }    

    if( data->len < 30 )
        Pike_error("Not a WEBP image\n");

    if( strncmp( data->str, "RIFF", 4 ) )
        Pike_error("Not a RIFF container\n");
    
    if( strncmp( data->str+8, "WEBPVP8 ", 8 ) )
        Pike_error("Not a WEBP VP8 image\n");
    
    len = p[16] | (p[17]<<8) | (p[18]<<16) | (p[19]<<24);

    if( len < 10 || len > data->len-20 )
        Pike_error("Invalid header\n");

    p += 20;
    // At p: len bytes WEBP VP8 data.
    
    if (vpx_codec_dec_init(&dec, &vpx_codec_vp8_dx_algo, NULL, 0) != VPX_CODEC_OK)
        Pike_error("Failed to initialize VP8 decoder\n");

    if( deblock == 0 && noise == 0)
    {
        ppcfg.post_proc_flag = VP8_NOFILTERING;
        vpx_codec_control(&dec, VP8_SET_POSTPROC, &ppcfg);
    }
    else
    {
        ppcfg.post_proc_flag = VP8_DEBLOCK | VP8_DEMACROBLOCK;
        if( noise > 0 )
            ppcfg.post_proc_flag |= VP8_ADDNOISE;
        ppcfg.deblocking_level = deblock;
        ppcfg.noise_level = noise;
    }

    if (vpx_codec_decode(&dec, p, len, NULL, 0) != VPX_CODEC_OK) 
    {
        vpx_codec_destroy(&dec);
        Pike_error("Failed to decode data\n");
    }

    {
        unsigned int y;
        vpx_codec_iter_t iter = NULL;
        vpx_image_t* const img = vpx_codec_get_frame(&dec, &iter);
        if (img)
        {
            unsigned int uvsize = (img->d_h+1)>>1;
            yuv = allocate_yuv( img->d_w, img->d_h );

            for (y = 0; y < yuv->ysize; ++y) 
                memcpy(yuv->Y + y * yuv->stride,
                       img->planes[0] + y * img->stride[0],
                       yuv->stride);

            for (y = 0; y < uvsize; ++y)
                memcpy(yuv->U + y * yuv->uvstride,
                       img->planes[1] + y * img->stride[1],
                       yuv->uvstride);

            for (y = 0; y < uvsize; ++y)
                memcpy(yuv->V + y * yuv->uvstride,
                       img->planes[2] + y * img->stride[2],
                       yuv->uvstride);
        }
    }
    vpx_codec_destroy(&dec);
  
    if( yuv )
    {
        // FIXME: We really should to some kind of filtering of the
        // (half-scale) UV data. At least some kind of linear
        // interpolation.
        push_object( convert_to_rgb( yuv ) );
    }
    else
        Pike_error("Failed to decode data\n");
    free_yuv( yuv );
}


/*

Used to test the conversion routines.

PIKEFUN object(Image.Image) __from_yuv( string data )
{
    struct yuv *yuv_data,*yptr= (struct yuv *)data->str;

    yuv_data = allocate_yuv( yptr->xsize, yptr->ysize );
    memcpy(yuv_data->Y, data->str+sizeof(struct yuv), (data->len-sizeof(struct yuv)) );
    pop_stack();
    push_object( convert_to_rgb(yuv_data) );
    free_yuv( yuv_data );
}

PIKEFUN string __to_yuv( object(Image.Image) image )
{
    struct yuv *yuv_data = convert_to_yuv( image );
    pop_stack();
    yuv_data->Y = yuv_data->U = yuv_data->V = 0;
    push_string( make_shared_binary_string( ((char *)yuv_data), yuv_data->sz ) );
    free_yuv( yuv_data );
}
*/

INIT {}
EXIT {}

#endif /* HAVE_LIBVPX */
