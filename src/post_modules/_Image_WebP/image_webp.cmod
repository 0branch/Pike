#include "pike_macros.h"
#include "object.h"
#include "constants.h"
#include "interpret.h"
#include "svalue.h"
#include "threads.h"
#include "array.h"
#include "builtin_functions.h"
#include "mapping.h"
#include "pike_error.h"
#include "threads.h"
#include "operators.h"
#include "module_support.h"
#include "modules/Image/image.h"
#include "config.h"

#ifdef HAVE_LIBWEBP

DECLARATIONS

/* #define DEFAULT_CMOD_STORAGE static*/
#define true 1
#define false 0

#include <webp/encode.h>
#include <webp/decode.h>


typedef int (*Importer)(WebPPicture* const, const uint8_t* const, int);


typedef struct object object;
typedef struct program program;

static program *image_program()
{
  static program *ip;
  if( !ip )
  {
    push_text("Image.Image");
    SAFE_APPLY_MASTER("resolv",1);
    ip = Pike_sp[-1].u.program;
    Pike_sp--;
  }
  return ip;
}

static object *allocate_image(int w, int h )
{
  push_int(w);
  push_int(h);
  return clone_object(image_program(),2);
}

static inline int image_width( object *img )
{
  char *x;
  if( !img ) return 0;
  x = get_storage( img, image_program() );
  if( !x ) return 0;
  return ((struct image *)x)->xsize;
}

static inline int image_height( object *img )
{
  char *x;
  if( !img ) return 0;
  x = get_storage( img, image_program() );
  if( !x ) return 0;
  return ((struct image *)x)->ysize;
}

static inline unsigned char *image_ptr( object *img )
{
  char *x;
  if( !img ) return 0;
  x = get_storage( img, image_program() );
  if( !x ) return 0;
  return (unsigned char *)(((struct image  *)x)->img);
}


static size_t Encode(const uint8_t* rgba, int width, int height, int stride,
                     Importer import, WebPConfig *config, uint8_t** output)
{
 WebPPicture pic;
 WebPMemoryWriter wrt;
 int ok;

 if( !WebPPictureInit(&pic) )
   return 0;

 pic.use_argb = !!config->lossless;
 pic.width = width;
 pic.height = height;
 pic.writer = WebPMemoryWrite;
 pic.custom_ptr = &wrt;
 WebPMemoryWriterInit(&wrt);

 ok = import(&pic, rgba, stride) && WebPEncode(config, &pic);
 WebPPictureFree(&pic);

 if (!ok)
 {
  free(wrt.mem);
  *output = NULL;
  switch( pic.error_code )
  {
   case VP8_ENC_ERROR_OUT_OF_MEMORY:
     *output = (uint8_t*)"Out of memory\n";
     break;
   case VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY:
     *output = (uint8_t*)"Out of memory while writing\n";
     break;
   case VP8_ENC_ERROR_NULL_PARAMETER:
     *output =(uint8_t*) "Pointer parameter is NULL\n";
     break;
   case VP8_ENC_ERROR_INVALID_CONFIGURATION:
     *output = (uint8_t*)"Invalid parameters\n";
     break;
   case VP8_ENC_ERROR_BAD_DIMENSION:
     *output = (uint8_t*)"Invalid image size\n";
     break;
   case VP8_ENC_ERROR_PARTITION0_OVERFLOW:
     *output = (uint8_t*)"Invalid partition0 size\n";
     break;
   case VP8_ENC_ERROR_PARTITION_OVERFLOW:
     *output = (uint8_t*)"Invalid partition size\n";
     break;
   case VP8_ENC_ERROR_FILE_TOO_BIG:
     *output = (uint8_t*)"File too big, >4G\n";
     break;
   case VP8_ENC_ERROR_USER_ABORT:
     *output = (uint8_t*)"User aborted\n";
     break;
   default:
     *output = (uint8_t*)"Unknown error\n";
     break;
   }
  return 0;
 }
 *output = wrt.mem;
 return wrt.size;
}


PIKEFUN object decode( string data )
{
  apply( Pike_fp->current_object, "_decode", 1 );
  push_text( "image" );
  f_index(2);
}

PIKEFUN mapping(string:object) _decode( string data )
{
  int width, height, npix;
  uint8_t *ip, *rp, *ap;
  object *i = NULL, *a = NULL;
  WebPBitstreamFeatures features;
  uint8_t *res = WebPDecodeRGBA( (uint8_t*)data->str, data->len,
				 &width, &height );
  WebPGetFeatures( (uint8_t*)data->str, data->len, &features );

  if( !res )
    Pike_error("Failed to decode image\n");

  ip = ap = NULL;
  rp = res;
  npix = width * height;

  if( features.has_alpha )
  {
    a = allocate_image( width, height );
    ap = image_ptr( a );
  }
  i = allocate_image( width, height );
  ip = image_ptr( i );

  while( npix-- )
  {
    uint8_t av;
    *(ip++) = *(rp++); // R
    *(ip++) = *(rp++); // G
    *(ip++) = *(rp++); // B
    av = *(rp++);

    if( av && ap )
    {
      *(ap++) = av; // A
      *(ap++) = av;
      *(ap++) = av;
    }
  }
  free( res );

  push_text( "image" );  push_object( i );
  push_text( "alpha" );
  if( a ) 
    push_object( a );
  else 
    push_undefined( );
  push_text("format"); push_text("WebP");
  push_text( "xsize" ); push_int( width );
  push_text( "ysize" ); push_int( height );
  f_aggregate_mapping( 10 );
}

#ifndef TYPEOF
#define TYPEOF(X) (X).type
#endif

static int parameter_int(struct mapping *map, const char *what, int def )
{
   struct svalue *v = simple_mapping_string_lookup(map,what);
   if (v && TYPEOF(*v) == PIKE_T_INT) return v->u.integer;
   return def;
}

static double parameter_float(struct mapping *map, const char *what,
			      double def )
{
   struct svalue *v = simple_mapping_string_lookup(map,what);
   if (!v) return def;
   if( TYPEOF(*v) == PIKE_T_INT )
       return (float)v->u.integer;
   if( TYPEOF(*v) == PIKE_T_FLOAT )
       return (float)v->u.float_number;
   return def;
}

static object *parameter_obj(struct mapping *map, const char *what )
{
   struct svalue *v = simple_mapping_string_lookup(map,what);
   if( v && TYPEOF(*v) == PIKE_T_OBJECT )
       return v->u.object;
   return NULL;
}

PIKEFUN string encode( object i, 
		       mapping(string:int|float|object)|void options )
{
    unsigned char *result = NULL;
    size_t size;
    object *a;
    int width  = image_width( i );
    int height  = image_height( i );
    unsigned char *iptr = image_ptr( i );
    unsigned char *rgba = NULL;
    Importer importer = WebPPictureImportRGB;
    WebPConfig config;
    WebPPreset preset;

    if( !iptr || !width || !height )
    {
        Pike_error("Image argument is not a valid image.");
    }

    if( options )
    {
        if( (preset = (WebPPreset)parameter_int( options, "preset", 0 )) )
        {
            if( !WebPConfigPreset(&config, preset, 75.0) )
                Pike_error("Failed to initialize config.\n");
        }
        else
        {
            if( !WebPConfigInit( &config ) )
                Pike_error("Failed to initialize config.\n");
        }

        a = parameter_obj( options, "alpha" );

#define GET_ENUM(Y,X) (config.X = (Y)parameter_int( options, #X, config.X ));
#define GET_INT(X) (config.X = parameter_int( options, #X, config.X ));
#define GET_FLT(X) (config.X = parameter_float( options, #X, config.X ));
#define GET_BOL(X) (config.X = !!parameter_int( options, #X, config.X ));

        GET_BOL(lossless);
        GET_FLT(quality);
        GET_INT(method);
        GET_ENUM(WebPImageHint,image_hint);
        GET_INT(target_size);
        GET_FLT(target_PSNR);
        GET_INT(segments);
        GET_INT(sns_strength);
        GET_INT(filter_strength);
        GET_INT(filter_sharpness);
        GET_INT(filter_type);
        GET_INT(autofilter);

        GET_INT(alpha_compression);
        GET_INT(alpha_filtering);
        GET_INT(alpha_quality);

        GET_INT(pass);
        GET_INT(show_compressed);
        GET_INT(preprocessing);
        GET_INT(partitions);
        GET_INT(partition_limit);
        GET_BOL(emulate_jpeg_size);
        GET_BOL(thread_level);
        GET_BOL(low_memory);

#undef GET_BOL
#undef GET_FLT
#undef GET_INT
#undef GET_ENUM

        if( config.quality >= 100 )
        {
            config.quality = 70;
            config.lossless = true;
        }
    }
    else
    {
        a = 0;
        WebPConfigInit( &config );
    }

    if( a )
    {
        unsigned char *aptr = image_ptr( a );
        int num = width*height;
        unsigned char *dst;
        importer = WebPPictureImportRGBA;

        if( !aptr )
            Pike_error("Alpha channels is not an image object\n");

        if( image_width( a ) != width || image_height( a ) != height )
            Pike_error("The alpha channel does not have the same size as the image\n");

        dst = rgba = (unsigned char*)xalloc( num * 4 );

        while( num-- )
        {
            *(dst++) = *(iptr++); // r
            *(dst++) = *(iptr++); // g
            *(dst++) = *(iptr++); // b
            *(dst++) = *(aptr); // a
            aptr += 3;
        }
    }

    size = Encode( rgba ? rgba : iptr, width, height, width*(rgba?4:3), 
                   importer, &config, &result );

    if( rgba ) free( rgba );

    if( size == 0  )
        Pike_error( (const char *)result );

    push_string( make_shared_binary_string( (const char *)result, size ) );
    free( result );
}


EXTRA {
#define CONST(X)  add_integer_constant( #X, WEBP_##X, 0 );
    CONST(PRESET_DEFAULT);
    CONST(PRESET_PICTURE);
    CONST(PRESET_PHOTO);
    CONST(PRESET_DRAWING);
    CONST(PRESET_ICON);
    CONST(PRESET_TEXT);

    CONST(HINT_DEFAULT);
    CONST(HINT_PICTURE);
    CONST(HINT_PHOTO);
    CONST(HINT_GRAPH);
#undef CONST
}
#endif /* HAVE_LIBVPX */
