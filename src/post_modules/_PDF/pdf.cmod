/* vim:syntax=c
 */
#include "global.h"
#include "interpret.h"
#include "parse.h"
#include "builtin_functions.h"
#include "module.h"

#define DEFAULT_CMOD_STORAGE static

DECLARATIONS

PIKECLASS reference {
    PIKEVAR string ref;

    PIKEFUN int __hash() {
	struct svalue sv;

	SET_SVAL(sv, PIKE_T_STRING, 0, string, THIS->ref);

	RETURN hash_svalue(&sv);
    }

    PIKEFUN int `==(mixed o) {
	struct svalue sv;

	SET_SVAL(sv, PIKE_T_STRING, 0, string, THIS->ref);

	RETURN is_eq(&sv, o);
    }

    PIKEFUN string _sprintf(int type, mapping params) {
	pop_n_elems(args);
	push_text("%O(%s)");
	ref_push_program(reference_program);
	ref_push_string(THIS->ref);
	f_sprintf(3);
    }
}

PIKECLASS pdf_object {
    PIKEVAR int id;
    PIKEVAR int rev;
    PIKEVAR mixed data;
    PIKEVAR string raw;

    INIT {
	THIS->data = svalue_undefined;
    }

    PIKEFUN mixed `()() {
	push_svalue(&THIS->data);
    }

    PIKEFUN string _sprintf(int type, mapping params) {
	pop_n_elems(args);
	push_text("%O(%d %d, %O)");
	ref_push_program(pdf_object_program);
	push_int(THIS->id);
	push_int(THIS->rev);
	push_svalue(&THIS->data);
	f_sprintf(5);
    }
}

PIKECLASS stream {
    PIKEVAR mapping param;
    PIKEVAR string data;

    PIKEFUN string _sprintf(int type, mapping params) {
	pop_n_elems(args);
	push_text("%O(%d bytes)");
	ref_push_program(stream_program);
	push_int(THIS->data->len);
	f_sprintf(3);
    }
}

static void generate_stream(struct svalue * s, const unsigned char * start, const unsigned char * end) {
    struct object * o = low_clone(stream_program);
    OBJ2_STREAM(o)->data = make_shared_binary_string((const char*)start, end-start);
    OBJ2_STREAM(o)->param = s->u.mapping;
    SET_SVAL(*s, PIKE_T_OBJECT, 0, object, o);
}

/*! Class representing a PDF @expr{name@} object. This is used where ever a @expr{name@} could
 *! be mistaken for a @expr{string@}. That is everywhere except as keys of dictionaries.
 */
PIKECLASS name {
    PIKEVAR string name;

    PIKEFUN void create(string name) {
	fprintf(stderr, "creating name: %s\n", name->str);
	THIS->name = name;
    }

    PIKEFUN int __hash() {
	struct svalue sv;

	SET_SVAL(sv, PIKE_T_STRING, 0, string, THIS->name);

	RETURN hash_svalue(&sv);
    }

    PIKEFUN int `==(mixed o) {
	struct svalue sv;

	SET_SVAL(sv, PIKE_T_STRING, 0, string, THIS->name);

	RETURN is_eq(&sv, o);
    }

    PIKEFUN string cast(string type) {
	ref_push_string(THIS->name);
    }

    PIKEFUN string _sprintf(int type, mapping params) {
	pop_n_elems(args);
	push_text("%O(%O)");
	ref_push_program(name_program);
	ref_push_string(THIS->name);
	f_sprintf(3);
    }
}

static struct object * create_reference(const unsigned char * start, const unsigned char * end) {
    struct object * o = low_clone(reference_program);
    struct pike_string * ref = make_shared_binary_string((const char*)start, end-start);

    OBJ2_REFERENCE(o)->ref = ref;

    return o;
}

static struct object * create_name(const unsigned char * start, const unsigned char * end) {
    struct object * o = low_clone(pdf_object_program);
    struct pike_string * name = make_shared_binary_string((const char*)start, end-start);

    OBJ2_NAME(o)->name = name;

    return o;
}

#include "rl/pdf.c"

PIKECLASS Reader {
    CVAR struct parse_context c;
    CVAR struct string_builder buf;

    INIT {
	init_string_builder_alloc(&THIS->buf, 4096, 0);
	parse_context_init(&THIS->c);
    }

    EXIT {
	// free the parse stack
    }

    PIKEFUN string buffer() {
	push_string(debug_make_shared_binary_string(THIS->buf.s->str, THIS->buf.s->len));
    }

    PIKEFUN int _sizeof() {
	push_int(THIS->buf.s->len - THIS->c.pos);
    }

    PIKEFUN string rest() {
	push_string(debug_make_shared_binary_string(THIS->buf.s->str+THIS->c.pos,
						    THIS->buf.s->len-THIS->c.pos));
    }

    PIKEFUN void reset() {
	THIS->buf.s->len = 0;
	parse_context_reset(&THIS->c);
    }

    PIKEFUN void feed(string data) {

	if (data->size_shift) Pike_error("expects non-unicode data\n");

	/*
	 * remove buffered data only if it helps
	 */
	if (data->len + THIS->buf.s->len + 1 >= THIS->buf.malloced) {
	    ptrdiff_t waste = THIS->c.mark;
#ifdef PDF_TRACE
	    fprintf(stderr, "shrinking by %ld bytes \n", waste);
#endif
	    if (waste > 0) {
		memmove(STR0(THIS->buf.s), STR0(THIS->buf.s)+waste, THIS->buf.s->len - waste);
		THIS->buf.s->len -= waste;
		THIS->c.mark = 0;
		THIS->c.pos -= waste;
		STR0(THIS->buf.s)[THIS->buf.s->len] = 0;
	    }
	}

	string_builder_binary_strcat0(&THIS->buf, STR0(data), data->len);
	pop_n_elems(args);
    }

    PIKEFUN mixed parse() {
	int ret;
	ptrdiff_t opos = THIS->c.pos;

	ret = parse_object(&THIS->c, THIS->buf.s);

#ifdef PDF_TRACE
	fprintf(stderr, "processed %ld in state %d\n", THIS->c.pos - opos, THIS->c.state);
#endif

	if (ret) {
	    struct svalue * sp = stack_top(&THIS->c.stack);
	    push_svalue(sp);
	    free_svalue(sp);
	    return;
	}

	if (THIS->c.state == PDF_error_state) {
	    push_text("foo");
	    push_int(THIS->c.pos);
	    apply (Pike_fp->current_object, "parse_error", 2);
	    /* lets guarantee the parse error throws */
	    Pike_error("error parsing pdf at %d\n", THIS->c.pos);
	}

	push_int(0);
    }

    PIKEFUN void parse_error(string msg, int pos) {
	Pike_error("error parsing pdf at %d\n", pos);
    }
}
